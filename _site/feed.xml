<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fumitsuki&#39;s magic box</title>
    <description>這是文月放部落格文章的備份的地方。 希望這個破破爛爛的百寶箱，你也能找到許多引起你興趣的小東西:)
</description>
    <link>http://yourdomain.com/</link>
    <atom:link href="http://yourdomain.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 15 Jun 2016 06:25:43 +0000</pubDate>
    <lastBuildDate>Wed, 15 Jun 2016 06:25:43 +0000</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>[5xRuby實習日記] Javascript 課程心得</title>
        <description>&lt;p&gt;覺得在五倍紅寶石實習的好處就是有各種免費的課程資源，跟喝不完的免費飲料(X)
不過由於個人還在就學的緣故，
因為衝到期中考跟各種學校事務，一直沒能把課程上好上滿QAQ”&lt;/p&gt;

&lt;p&gt;這次的JS課程很遺憾地只上了最後一堂課QAQ” (而且只有後半段QAQ) 
(沒有HTML只上到第一堂課這麼淒慘就是了)
我覺得這次的確有對jQuery有比較多的了解，以往都是一直複製別人的code亂改，
終於可以了解每一行code都在做什麼，然後完整地寫出一段code來。&lt;/p&gt;

&lt;p&gt;我覺得Kuro講師提供很多可以參考的例子提供觀摩跟練習，這一點真的有讓我覺得比較易學、易懂。
而且可以實際上了解要怎麼使用，有什麼時機可以使用。&lt;/p&gt;

&lt;p&gt;接著提供一下最後一堂課的筆記：
### 善用find找子元素
&lt;code class=&quot;highlighter-rouge&quot;&gt;
$(this).find(&#39;.title&#39;).toggleClass(&#39;active&#39;);
&lt;/code&gt;
### 用trigger觸發事件
例如：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	$(.b).on(&#39;click&#39;,function(){
	$(.a).trigger(&#39;click&#39;);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;這樣觸發的是a的click事件，因此如果a的click事件中有this，會的是a自己而不是b&lt;/p&gt;

&lt;h3 id=&quot;data&quot;&gt;利用data存取、指定&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;存取 ex.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	$(&#39;.home&#39;).data(&#39;show&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如此一來可以存取有home這個class的物件的data-show的值
- 指定 ex.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	$(&#39;.home&#39;).data(&#39;show&#39;,&#39;home&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;把有home這個class的物件的data-show的值改成home&lt;/p&gt;

&lt;p&gt;剩下晚一點再來補，不過我有寫在&lt;a href=&quot;https://hackmd.io/s/rk_X2cdl&quot;&gt;hackMD&lt;/a&gt;上提供參考&lt;/p&gt;

</description>
        <pubDate>Wed, 01 Jun 2016 17:23:32 +0000</pubDate>
        <link>http://yourdomain.com/rails/2016/06/01/2016-spring-5xruby-rails-course.html</link>
        <guid isPermaLink="true">http://yourdomain.com/rails/2016/06/01/2016-spring-5xruby-rails-course.html</guid>
        
        <category>javascript</category>
        
        <category>jquery</category>
        
        <category>kuro</category>
        
        <category>5xruby</category>
        
        <category>intern</category>
        
        <category>2016</category>
        
        
        <category>Rails</category>
        
      </item>
    
      <item>
        <title>[Rails 學習筆記]用Vagrant打造舒適美好的rails環境吧！</title>
        <description>&lt;p&gt;相信這個世界上有許多人和我一樣，窮窮的買不起mac，又沒有可以用linux的腦袋跟耐心，所以只好一直被windows慘虐QAQ”
到目前為止在下都是用c9.io來寫rails的，但畢竟不是在本機寫，又沒錢買付費版，所以一直都要等c9.io的workspace緩緩慢慢的開啟，每個指令也都緩緩慢慢的。只是下個 &lt;code class=&quot;highlighter-rouge&quot;&gt;rake db:migrate&lt;/code&gt; 之類的CPU就會爆衝(下次開c9可以看右上角的值)，感覺這個環境根本不堪負荷啊…&lt;/p&gt;

&lt;p&gt;所以呢，想說用Vagrant來建虛擬機，這似乎是比較簡單的方法呢。對於我這個小腦殘來說應該不會耍雷得太嚴重XD&lt;/p&gt;

&lt;p&gt;其實網路上Vagrant的教學文還不少(而且還是中文的)，遇到問題還可以上stackoverflow查，個人覺得資源蠻多的。如果是docker的話我個人絕對沒有信心把它裝起來XD&lt;/p&gt;

&lt;p&gt;不過說實在的，心底還是默默的期望可以買mac啊&amp;gt;&amp;lt;”&lt;/p&gt;

&lt;p&gt;總而言之廢話不多說(已經講很多了)就來裝裝看吧！&lt;/p&gt;

&lt;p&gt;BTW，在下的電腦目前是萬惡的 windows 10，所以安裝過程可能跟大家不太一樣，細節可以參考底下的教材。然後安裝過程中的問題跟雷點我也會一併分享的w&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;安裝步驟&lt;/h3&gt;

&lt;h4 id=&quot;vagrantvirtual-boxmobaxterm&quot;&gt;安裝Vagrant、Virtual Box、MobaxTerm&lt;/h4&gt;

&lt;p&gt;首先來安裝等等會需要用到的東西：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.vagrantup.com/downloads.html&quot;&gt;Vagrant&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;依照自己的作業系統環境找適合的版本安裝&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.virtualbox.org/wiki/Downloads&quot;&gt;VirtualBox&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;VirtualBox platform packages&lt;/li&gt;
      &lt;li&gt;VirtualBox 5.0.20 Oracle VM VirtualBox Extension Pack&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://mobaxterm.mobatek.net/download.html&quot;&gt;MobaXterm&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;可以拿來連telnet、ssh、http、ftp…等等的，很方便&lt;/li&gt;
      &lt;li&gt;這次會拿來連ssh&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;安裝過程中只要一直按 &lt;code class=&quot;highlighter-rouge&quot;&gt;next&lt;/code&gt; 基本上就會裝好了XD
個人安裝沒有遇到什麼問題，有遇到的話可以google一下解決辦法。&lt;/p&gt;

&lt;h4 id=&quot;section-1&quot;&gt;生出虛擬機&lt;/h4&gt;
&lt;p&gt;接著到&lt;a href=&quot;https://atlas.hashicorp.com/boxes/search?utm_source=vagrantcloud.com&amp;amp;vagrantcloud=1&quot;&gt;Vagrant Cloud&lt;/a&gt;物色一下要安裝的box，個人這次用的是 &lt;code class=&quot;highlighter-rouge&quot;&gt;ubuntu/trusty64&lt;/code&gt;。
找到需要的版本以後會看到這樣一行command line，像這樣：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ vagrant init ubuntu/trusty64; vagrant up --provider virtualbox
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;這個時候只要愉快地把這行指令貼到terminal上，虛擬機就生出來了呢！這種時候就會覺得Vagrant真是強大呢！&lt;/p&gt;

&lt;p&gt;不過第一次開會跑很久很久很久，請耐心等待XD&lt;/p&gt;

&lt;h4 id=&quot;ssh&quot;&gt;ssh連線&lt;/h4&gt;
&lt;p&gt;接著差不多跑玩了的時候，稍微翻一下terminal上的訊息，應該會有類似這樣的訊息：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;default: SSH address: 127.0.0.1:2222
default: SSH username: vagrant
default: SSH auth method: private key
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;到virtualbox那邊看，多了一個虛擬機。
&lt;img src=&quot;http://i.imgur.com/0VPr8U6.png&quot; alt=&quot;new virtualbox&quot; /&gt;&lt;/p&gt;

&lt;p&gt;把MobaXterm打開以後，到session新增ssh session，在host、username、port填入：
&lt;img src=&quot;http://i.imgur.com/ZF8sTSt.png&quot; alt=&quot;new session&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在左邊側欄對 &lt;code class=&quot;highlighter-rouge&quot;&gt;127.0.0.1(vibrant)&lt;/code&gt; 點兩下，照理來說會出現類似 &lt;code class=&quot;highlighter-rouge&quot;&gt;vagrant@vagrant-ubuntu-trusty-64:~$&lt;/code&gt; 的東西，或是要你輸入password。 
沒有的話，到 &lt;strong&gt;Settings &amp;gt; Configurations &amp;gt; Terminal&lt;/strong&gt; 把 &lt;code class=&quot;highlighter-rouge&quot;&gt;Use Windows PATH environment&lt;/code&gt;打勾。&lt;/p&gt;

&lt;p&gt;預設的username和password都會是vagrant。&lt;/p&gt;

&lt;h4 id=&quot;vt-xamd-v-&quot;&gt;問題: VT-x/AMD-V 硬體加速在您的系統不可用&lt;/h4&gt;
&lt;p&gt;我個人就是遇到這個狀況，虛擬機開不起來。
這個時候可以檢查一下虛擬化技術有沒有開起來，這個部分可以到 &lt;strong&gt;工作管理員 &amp;gt; CPU&lt;/strong&gt; 去看。
&lt;img src=&quot;http://i.imgur.com/75QAWrA.png&quot; alt=&quot;虛擬化技術&quot; /&gt;
英文版的應該會寫virtualization之類的。&lt;/p&gt;

&lt;p&gt;如果上面不是寫著「已啟用」的話，那就到BIOS去把virtualization technology 開起來吧！怎麼把BIOS開起來可以google一下。&lt;/p&gt;

&lt;p&gt;至於windows10的話，就一邊按著shift一邊重新啟動，出現藍藍畫面後選 &lt;strong&gt;進階選項 &amp;gt; UEFI韌體設定 &amp;gt; 重新啟動&lt;/strong&gt; 。
接著電腦重新啟動後就可以來改設定了！按F10進去改設定，在advanced應該會有一個叫virtualization technology的選項，把它改成enabled，就OK了！
再按F10電腦就會愉快的開機了，這一次虛擬機應該開得起來了。&lt;/p&gt;

&lt;h4 id=&quot;section-2&quot;&gt;回復原來的狀態&lt;/h4&gt;
&lt;p&gt;如果過程中搞砸了(?)或是覺得虛擬機髒髒的越看越不順眼(?)，都可以還原成一開始的狀態呢。&lt;/p&gt;

&lt;p&gt;這裡就試著回復成乾淨的狀態吧。&lt;/p&gt;

&lt;p&gt;windows的話可以照著這個做：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ vagrant halt
$ vagrant destroy --force
$ del /F /Q  Vagrantfile
$ rmdir /S /Q  .vagrant
 
$ vagrant box remove ubuntu/trusty64
$ rmdir /S /Q %USERPROFILE%\.vagrant.d\boxes\ubuntu-VAGRANTSLASH-trusty64
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;mac的話可以參考以下的寫法：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ vagrant halt ; vagrant destroy --force
$ rm -rf .vagrant Vagrantfile
 
$ vagrant box remove ubuntu/trusty64
$ rm -rf $HOME/.vagrant.d/boxes/ubuntu-VAGRANTSLASH-trusty64
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;section-3&quot;&gt;建立環境&lt;/h4&gt;
&lt;p&gt;到這裡，我們已經學會怎麼把虛擬機開好了噢！而且還知道怎麼把它砍掉呢！可是網羅(?)還沒有結束，懂得把虛擬機開起來還要懂得安裝環境才行XDD 
開起來的乾乾淨淨的虛擬機是沒有git、ruby…什麼都沒有的XD 所以還是要把環境架起來才能開心寫rails(淚顏)&lt;/p&gt;

&lt;p&gt;所以就來重新建一次虛擬機吧，不過這一次用人家架好的環境XDD
原本看gorails上有一連串複雜有可怕的步驟，覺得頭暈目眩。後來發現github上有人家弄好的環境，最後一比commit是1小時前(還有在更新中)，而且star數也有一千多，就毫不猶豫拿來用了www&lt;/p&gt;

&lt;p&gt;這一次的話就：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git clone https://github.com/rails/rails-dev-box.git
$ cd rails-dev-box
$ vagrant up
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;就有人家弄好好的環境可以用了，覺得開心愉快。
等到跑了好久好久以後，就有一台要git有git、要有ruby有ruby的虛擬機了~&lt;/p&gt;

&lt;h4 id=&quot;rails&quot;&gt;把rails架起來&lt;/h4&gt;
&lt;p&gt;不過rails-dev-box裡面有的只有寫rails會用到的東西，但是沒有rails！
對，沒~有~rails~~&lt;/p&gt;

&lt;p&gt;所以還是要自己裝一下XDD&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo gem install rails --no-ri --no-rdoc
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;到這裡恭喜大家，環境架得差不多了！
祝大家玩耍愉快！&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;相關教材&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.codedata.com.tw/social-coding/vagrant-tutorial-1-developer-and-vm&quot;&gt;Vagrant Tutorial（1）雲端研發人員，你也需要虛擬機！&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.codedata.com.tw/social-coding/vagrant-tutorial-2-playing-vm-with-vagrant&quot;&gt;Vagrant Tutorial（2）跟著流浪漢把玩虛擬機&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://www.codedata.com.tw/social-coding/vagrant-tutorial-3-vm-lifecycle&quot;&gt;Vagrant Tutorial（3）細說虛擬機生滅狀態&lt;/a&gt;
覺得以上的教材講得其實很詳細，除了安裝步驟還有很多的介紹跟閒聊w&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/chgu82837/ab1255846b5335407105&quot;&gt;在 Windows 用 Vagrant 快速建立你的 Linux 環境&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gorails.com/guides/using-vagrant-for-rails-development&quot;&gt;Using Vagrant for Rails Development&lt;/a&gt;
gorails 上的教學，不過這篇就比較複雜一些了。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/rails/rails-dev-box&quot;&gt;Rails dev box&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Thu, 26 May 2016 15:40:58 +0000</pubDate>
        <link>http://yourdomain.com/rails/2016/05/26/build-rails-environment-with-vagrant.html</link>
        <guid isPermaLink="true">http://yourdomain.com/rails/2016/05/26/build-rails-environment-with-vagrant.html</guid>
        
        <category>vagrant</category>
        
        <category>rails</category>
        
        <category>mobaxterm</category>
        
        <category>virtualbox</category>
        
        
        <category>Rails</category>
        
      </item>
    
      <item>
        <title>[Rails學習筆記] 推薦初學者閱讀的兩篇文章</title>
        <description>&lt;p&gt;最近一直在反思學習歷程，
還有探討接下來應該要怎麼樣繼續磨練技術，
剛好看到兩篇不錯的文章：&lt;/p&gt;

&lt;h3 id=&quot;how-i-trained-to-learn-rails&quot;&gt;How I trained to learn rails&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://medium.com/how-i-learned-ruby-rails/how-i-trained-to-learn-rails-e08c94e2a51e#.x8nx8aqld&quot;&gt;How I trained to learn rails&lt;/a&gt;
文中有推薦的學習資源，還有一些學習的建議。
我個人覺得”Not Copying/Pasting Code”、”Not getting tired of Google-ing”、”Reading Documentation and Source Codes”三個建議蠻受用的。&lt;/p&gt;

&lt;h3 id=&quot;top-10-mistakes-that-rails-programmers-make&quot;&gt;Top 10 mistakes that rails programmers make&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.toptal.com/ruby-on-rails/top-10-mistakes-that-rails-programmers-make&quot;&gt;Top 10 mistakes that rails programmers make&lt;/a&gt;
這篇文章提到許多rails開發者會犯的錯誤，
比方說不要放太多logic在view或controller裡面，
用太多的gems (我覺得像我現在就很依賴gem，又不知所以然)，
忽略log file，沒有注意到N+1 Queues的問題…等等。
我覺得都還蠻重要的。&lt;/p&gt;

&lt;p&gt;除了以上10個錯誤以外，
我覺得我自己還常犯的錯有：沒有把相同的html放到一個partial裡重複利用、直接在view裡面呼叫model…之類的。&lt;/p&gt;

&lt;p&gt;以後還是要學習得夠扎實，還有多注意這些細節。
希望之後能夠更熟悉rails的運作，從義大利麵程式碼中脫身而出XD&lt;/p&gt;

</description>
        <pubDate>Thu, 12 May 2016 12:52:27 +0000</pubDate>
        <link>http://yourdomain.com/rails/2016/05/12/two-articles-recommend-to-rails-beginner.html</link>
        <guid isPermaLink="true">http://yourdomain.com/rails/2016/05/12/two-articles-recommend-to-rails-beginner.html</guid>
        
        <category>article</category>
        
        <category>recommend</category>
        
        <category>beginner</category>
        
        <category>learn-rails</category>
        
        <category>mistakes</category>
        
        
        <category>Rails</category>
        
      </item>
    
      <item>
        <title>[Rails學習筆記] 用Settingslogic把重要資訊藏起來!</title>
        <description>&lt;p&gt;首先來碎碎念一下XD
最近花了好多時間在寫自己的blog，
其實一直很想把它推到Github上(為了綠綠的attribute!!)，
但是又怕後台路徑跟帳號密碼會被看光光，其實煩惱了一陣子XD&lt;/p&gt;

&lt;p&gt;經過大師提點(?)之後才知道原來這是可以解決的呢XD
要解決這個問題有兩種方法，
一種是把設定值放在ENV，
另一種則是用settinglogic來解決這個問題。
這邊會提到的是後者~&lt;/p&gt;

&lt;p&gt;(正文要開始了w)&lt;/p&gt;

&lt;h3 id=&quot;gem&quot;&gt;安裝gem&lt;/h3&gt;

&lt;p&gt;首先呢，先在 &lt;strong&gt;Gemfile&lt;/strong&gt; 中加入：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem  &quot;settingslogic&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然後在terminal執行 &lt;code class=&quot;highlighter-rouge&quot;&gt;$ bundle&lt;/code&gt; 就安裝完成了。&lt;/p&gt;

&lt;h3 id=&quot;settinglogic&quot;&gt;使用Settinglogic&lt;/h3&gt;
&lt;p&gt;這個gem的詳細說明可以看github上的&lt;a href=&quot;https://github.com/binarylogic/settingslogic&quot;&gt;README&lt;/a&gt;。
那這邊就簡單介紹初步的使用~&lt;/p&gt;

&lt;p&gt;在 &lt;strong&gt;app/model&lt;/strong&gt; 中加入 &lt;strong&gt;settings.rb&lt;/strong&gt;，
裡面加入以下的內容：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Settings &amp;lt; Settingslogic
  source &quot;#{Rails.root}/config/application.yml&quot;
  namespace Rails.env
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;那code中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;application.yml&lt;/code&gt; 就是等一下要放後台路徑跟帳密的地方~&lt;/p&gt;

&lt;p&gt;接著務必記得把 &lt;strong&gt;application.yml&lt;/strong&gt; 加到 &lt;strong&gt;.gitignore&lt;/strong&gt; 中，
否則所有努力都是白費的噢~~~&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ echo &quot;config/application.yml&quot; &amp;gt;&amp;gt; .gitignore
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section&quot;&gt;後台路徑&lt;/h3&gt;
&lt;p&gt;上次在文章 &lt;a href=&quot;http://fumitsuki-blog.herokuapp.com/articles/backend-with-namespace&quot;&gt;善用namespace建立後台&lt;/a&gt; 中有提到後台路徑的作法，
這邊要更進階的把後台路徑藏起來~&lt;/p&gt;

&lt;p&gt;打開 &lt;strong&gt;config/route.rb&lt;/strong&gt; ，原本的後台路徑應該是：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; namespace :admin do
  # ...
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;這邊要把它改成：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; namespace :admin, path: Settings.admin_path_prefix do
  # ...
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;這裡的 ‘admin_path_prefix&lt;code class=&quot;highlighter-rouge&quot;&gt; 到時候會放在 **application.yml** 存後台路徑。
(可以自己取，要叫 &lt;/code&gt;backend_path` 什麼的隨意~)
所以接著就在 &lt;strong&gt;config/&lt;/strong&gt; 中加入 &lt;strong&gt;application.yml&lt;/strong&gt;，裡面加上：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;defaults: &amp;amp;defaults
development:
  &amp;lt;&amp;lt;: *defaults
  admin_path_prefix: your_admin_path
test:
  &amp;lt;&amp;lt;: *defaults
  admin_path_prefix: your_admin_path
production:
  &amp;lt;&amp;lt;: *defaults
  admin_path_prefix: your_admin_path
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;這裡的 ` your_admin_path&lt;code class=&quot;highlighter-rouge&quot;&gt; 就是後台路徑~ 
可以根據不同的環境自訂後台~
如果 &lt;/code&gt;$ rails s` 的時候會出錯，建議檢查一下有沒有多打少打什麼，還有縮排正不正確。&lt;/p&gt;

&lt;h3 id=&quot;http-basic-authetication&quot;&gt;http basic authetication&lt;/h3&gt;
&lt;p&gt;常常用 http basic authetication 都是在 controller 中加入：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http_basic_authenticate_with name: &quot;my_name&quot;, password: &quot;my_secret&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果這行跟著 controller 一起被推上github repo的話，肯定會被黑黑攻陷的！(誤)
所以也要想辦法放到 application.yml 中。
所以先把現在這行改成：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http_basic_authenticate_with  Settings.http_basic_auth.to_h
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;這裡的 &lt;code class=&quot;highlighter-rouge&quot;&gt;http_basic_auth&lt;/code&gt; 就是會在 &lt;strong&gt;application.yml&lt;/strong&gt; 中加入的帳密，
&lt;code class=&quot;highlighter-rouge&quot;&gt;.to_h&lt;/code&gt; 會把 &lt;code class=&quot;highlighter-rouge&quot;&gt;http_basic_auth&lt;/code&gt; 轉成雜湊。&lt;/p&gt;

&lt;p&gt;接著呢，在 &lt;strong&gt;application.yml&lt;/strong&gt;加入&lt;code class=&quot;highlighter-rouge&quot;&gt;http_basic_auth&lt;/code&gt; ：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;defaults: &amp;amp;defaults
development:
 &amp;lt;&amp;lt;: *defaults
 admin_path_prefix: your_admin_path
 http_basic_auth:
    :name: your_name 
    :password: Your_password
test:
 &amp;lt;&amp;lt;: *defaults
production:
 &amp;lt;&amp;lt;: *defaults
admin_path_prefix: your_admin_path
 http_basic_auth:
    :name: your_name 
    :password: Your_password
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;這樣就大功告成了！接著只要開啟server確定有好好運作就OK了~
照理來說後台路徑會變成 &lt;code class=&quot;highlighter-rouge&quot;&gt;your_admin_path/your_controller_name&lt;/code&gt; 噢~&lt;/p&gt;

&lt;p&gt;到這裡告一段落~ 趕快來試試看吧！&lt;/p&gt;

</description>
        <pubDate>Thu, 12 May 2016 12:33:54 +0000</pubDate>
        <link>http://yourdomain.com/rails/2016/05/12/hide-routes-and-authenticate-with-settingslogic.html</link>
        <guid isPermaLink="true">http://yourdomain.com/rails/2016/05/12/hide-routes-and-authenticate-with-settingslogic.html</guid>
        
        <category>hide</category>
        
        <category>route</category>
        
        <category>authenticate</category>
        
        <category>settingslogic</category>
        
        
        <category>Rails</category>
        
      </item>
    
      <item>
        <title>[5xRuby實習日記] HTML &amp; CSS課程心得</title>
        <description>&lt;p&gt;首先呢，我要先懺悔一下XD
由於課務的關係有點忙忙的，所以沒有全程參與HTML的課程，
而且老實說我只有去上第一堂課QwQ”
要不然我覺得Amos講師講得還不錯的說…&lt;/p&gt;

&lt;p&gt;所幸這是第二次上Amos的課，所以我還生得出心得來(X)&lt;/p&gt;

&lt;p&gt;雖然以前就碰過一點點HTML跟CSS，
但是一直倚賴bootstrap套版，
其實沒有好好的練習過自己切版、寫RWD，
而且也沒有顧及SEO的部分，
我覺得這點就還重要的。&lt;/p&gt;

&lt;p&gt;覺得雖然可以看過網路上的文件，就大概知道怎麼樣使用標籤、怎麼刻CSS，
但其中還是有很多枚枚角角，真的還是要有有經驗的人來提點，
還有怎麼刻會有那些缺點之類的，我覺得這點也是收穫最多的部分吧。&lt;/p&gt;

&lt;p&gt;有興趣的話可以追蹤一下Amos講師的網站&lt;a href=&quot;csscoke.com&quot;&gt;CSS可樂&lt;/a&gt;，
還有容我工商服務一下w 可以參考一下&lt;a href=&quot;https://5xruby.tw/talks?category=front-end&quot;&gt;五倍紅寶石的前端課程&lt;/a&gt;噢XD&lt;/p&gt;

</description>
        <pubDate>Thu, 28 Apr 2016 16:56:13 +0000</pubDate>
        <link>http://yourdomain.com/html/css/2016/04/28/2016-spring-5xruby-html&css-course.html</link>
        <guid isPermaLink="true">http://yourdomain.com/html/css/2016/04/28/2016-spring-5xruby-html&css-course.html</guid>
        
        <category>5xruby,</category>
        
        <category>intern,</category>
        
        <category>2016,</category>
        
        <category>html,</category>
        
        <category>css,</category>
        
        <category>amos</category>
        
        
        <category>HTML</category>
        
        <category>CSS</category>
        
      </item>
    
      <item>
        <title>[Rails 學習筆記]善用namespace建立後台</title>
        <description>&lt;p&gt;在寫blog的時候一直很苦惱要怎麼寫後台，
是要另外有一個叫backend的controller嗎？還是怎麼樣呢？&lt;/p&gt;

&lt;p&gt;後來才知道原來有namespace這東西，覺得人間愉快(X)&lt;/p&gt;

&lt;p&gt;所以廢話少說就開始吧！&lt;/p&gt;

&lt;h3 id=&quot;route&quot;&gt;route的部分&lt;/h3&gt;
&lt;p&gt;首先到 &lt;strong&gt;route.rb&lt;/strong&gt; 加入：&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:admin&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;resources&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:articles&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;這樣index的路徑就換變成 &lt;strong&gt;admin/articles&lt;/strong&gt; 了， 
可以用&lt;code class=&quot;highlighter-rouge&quot;&gt;$ rake routes&lt;/code&gt;來看一下路徑長什麼樣子。&lt;/p&gt;

&lt;p&gt;然後這邊要特別注意（大師提點的，不是我自己說的w），
盡量不要用admin、backend這種大家都想得到的名稱。
否則後台很容易被恐怖的大黑黑所攻陷。(黑黑最喜歡戳戳了(́◉◞౪◟◉‵))&lt;/p&gt;

&lt;p&gt;當然，article的部分就是controller的名字，要叫posts…什麼的都可以。&lt;/p&gt;

&lt;h3 id=&quot;controller&quot;&gt;Controller的部分&lt;/h3&gt;
&lt;p&gt;接下來是contorller的部分，這邊只要有基本的CRUD加上認證就OK了。
（其他功能就自己盡情加吧，那就跟本文無關了w）
可以善用command line來建立controller，像是：&lt;code class=&quot;highlighter-rouge&quot;&gt;$ rails g controller admin/articles&lt;/code&gt;
這個時候可以發現多出了 &lt;strong&gt;app/controllers/admin/articles_controller.rb&lt;/strong&gt; 這個檔案，
到這裡後台的路徑就差不多了。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;使用者認證&lt;/h3&gt;
&lt;p&gt;這個部分看是多使用者還是單一使用者，
如果是單一使用者的話可以用簡單的 &lt;strong&gt;http basic authenticate&lt;/strong&gt; 來處理。&lt;/p&gt;

&lt;p&gt;在剛剛的 &lt;strong&gt;admin/articles_controller.rb&lt;/strong&gt; 中加入：&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;http_basic_authenticate_with&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;name: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;your_name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;password: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;your_password&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;這邊的&lt;code class=&quot;highlighter-rouge&quot;&gt;your_name&lt;/code&gt;跟&lt;code class=&quot;highlighter-rouge&quot;&gt;your_password&lt;/code&gt;就自由填入自訂的帳號密碼吧！
多使用者的話，可以用 &lt;strong&gt;devise&lt;/strong&gt; 這個方便好用的套件。&lt;/p&gt;

&lt;p&gt;首先，在 &lt;strong&gt;Gemfile&lt;/strong&gt; 中加入：&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;devise&#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然後在命令列輸入&lt;code class=&quot;highlighter-rouge&quot;&gt;$ bundle&lt;/code&gt;就可以安裝套件了。
接著呢，再命令列輸入&lt;code class=&quot;highlighter-rouge&quot;&gt;$ rails g devise:install&lt;/code&gt;來產生devise設定檔
再輸入&lt;code class=&quot;highlighter-rouge&quot;&gt;$ rails g devise user&lt;/code&gt;產生user model，然後便忘了&lt;code class=&quot;highlighter-rouge&quot;&gt;rake db:migrate&lt;/code&gt;來migrate它。Devise也提供view的樣板可以使用，在命令列輸入&lt;code class=&quot;highlighter-rouge&quot;&gt;rails generate devise:views&lt;/code&gt;就可以自動產生了。&lt;/p&gt;

&lt;p&gt;除此之外，
其實也有後台的套件可以用，像說&lt;a href=&quot;https://github.com/sferik/rails_admin&quot;&gt;rails_admin&lt;/a&gt;之類的，可以參考看看呢。&lt;/p&gt;

</description>
        <pubDate>Wed, 27 Apr 2016 16:07:19 +0000</pubDate>
        <link>http://yourdomain.com/rails/2016/04/27/2016-spring-5xruby-javascript-course.html</link>
        <guid isPermaLink="true">http://yourdomain.com/rails/2016/04/27/2016-spring-5xruby-javascript-course.html</guid>
        
        <category>backend</category>
        
        <category>namespace</category>
        
        <category>devise</category>
        
        <category>rails</category>
        
        
        <category>Rails</category>
        
      </item>
    
      <item>
        <title>[5xRuby實習日記] Javascript 課程心得</title>
        <description>&lt;p&gt;覺得在五倍紅寶石實習的好處就是有各種免費的課程資源，跟喝不完的免費飲料(X)
不過由於個人還在就學的緣故，
因為衝到期中考跟各種學校事務，一直沒能把課程上好上滿QAQ”&lt;/p&gt;

&lt;p&gt;這次的JS課程很遺憾地只上了最後一堂課QAQ” (而且只有後半段QAQ) 
(沒有HTML只上到第一堂課這麼淒慘就是了)
我覺得這次的確有對jQuery有比較多的了解，以往都是一直複製別人的code亂改，
終於可以了解每一行code都在做什麼，然後完整地寫出一段code來。&lt;/p&gt;

&lt;p&gt;我覺得Kuro講師提供很多可以參考的例子提供觀摩跟練習，這一點真的有讓我覺得比較易學、易懂。
而且可以實際上了解要怎麼使用，有什麼時機可以使用。&lt;/p&gt;

&lt;p&gt;接著提供一下最後一堂課的筆記：
### 善用find找子元素
&lt;code class=&quot;highlighter-rouge&quot;&gt;
$(this).find(&#39;.title&#39;).toggleClass(&#39;active&#39;);
&lt;/code&gt;
### 用trigger觸發事件
例如：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	$(.b).on(&#39;click&#39;,function(){
	$(.a).trigger(&#39;click&#39;);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;這樣觸發的是a的click事件，因此如果a的click事件中有this，會的是a自己而不是b&lt;/p&gt;

&lt;h3 id=&quot;data&quot;&gt;利用data存取、指定&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;存取 ex.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	$(&#39;.home&#39;).data(&#39;show&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如此一來可以存取有home這個class的物件的data-show的值
- 指定 ex.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	$(&#39;.home&#39;).data(&#39;show&#39;,&#39;home&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;把有home這個class的物件的data-show的值改成home&lt;/p&gt;

&lt;p&gt;剩下晚一點再來補，不過我有寫在&lt;a href=&quot;https://hackmd.io/s/rk_X2cdl&quot;&gt;hackMD&lt;/a&gt;上提供參考&lt;/p&gt;

</description>
        <pubDate>Wed, 27 Apr 2016 16:02:15 +0000</pubDate>
        <link>http://yourdomain.com/javascript/2016/04/27/backend-with-namespace.html</link>
        <guid isPermaLink="true">http://yourdomain.com/javascript/2016/04/27/backend-with-namespace.html</guid>
        
        <category>javascript</category>
        
        <category>jquery</category>
        
        <category>kuro</category>
        
        <category>5xruby</category>
        
        <category>intern</category>
        
        <category>2016</category>
        
        
        <category>Javascript</category>
        
      </item>
    
  </channel>
</rss>
