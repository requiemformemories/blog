<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="/blog/" rel="alternate" type="text/html" /><updated>2020-04-29T17:47:23+08:00</updated><id>/blog/</id><title type="html">Fumitsuki’s magic box</title><subtitle>keep calm and eat eight Plates.</subtitle><entry><title type="html">[SQL] 為什麼要多一張表處理多對多關係？把數值都逗號分隔存起來不行嗎？</title><link href="/blog/sql-no-comma-seperated-list" rel="alternate" type="text/html" title="[SQL] 為什麼要多一張表處理多對多關係？把數值都逗號分隔存起來不行嗎？" /><published>2020-04-29T14:13:00+08:00</published><updated>2020-04-29T14:13:00+08:00</updated><id>/blog/sql-no-comma-seperated-list</id><content type="html" xml:base="/blog/sql-no-comma-seperated-list">&lt;p&gt;想當初小的在學校學 SQL 的時候，從來沒有仔細想過為什麼的多對多關聯都要再多用一個 table 來處理。&lt;/p&gt;

&lt;p&gt;如果直接把資料想辦法塞在一個欄位裡，比方說在 table &lt;code class=&quot;highlighter-rouge&quot;&gt;users&lt;/code&gt; 上新增 &lt;code class=&quot;highlighter-rouge&quot;&gt;orders&lt;/code&gt; 欄位（type 為 &lt;code class=&quot;highlighter-rouge&quot;&gt;VARCHAR&lt;/code&gt;），把 order_id 們像是 &lt;code class=&quot;highlighter-rouge&quot;&gt;1, 34, 135&lt;/code&gt; 這樣地塞在 &lt;code class=&quot;highlighter-rouge&quot;&gt;orders&lt;/code&gt;欄位中，不是也可以嗎？（或是反過來新增 &lt;code class=&quot;highlighter-rouge&quot;&gt;users&lt;/code&gt; 欄位在資料表 &lt;code class=&quot;highlighter-rouge&quot;&gt;orders&lt;/code&gt; 上）&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;id&lt;/th&gt;
      &lt;th&gt;name&lt;/th&gt;
      &lt;th&gt;….&lt;/th&gt;
      &lt;th&gt;orders&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;Grace&lt;/td&gt;
      &lt;td&gt;….&lt;/td&gt;
      &lt;td&gt;2, 14, 65, 11&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;Carol&lt;/td&gt;
      &lt;td&gt;….&lt;/td&gt;
      &lt;td&gt;3, 2, 1, 12, 100&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;乍聽之下，這個想法真是聰明，這樣就可以省得新增一個表格呢！&lt;/p&gt;

&lt;p&gt;但是今天就要為大家破除這個迷思，一但試了一次這個方法，&lt;strong&gt;未來恐怕後患無窮&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;未來恐怕後患無窮&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;未來恐怕後患無窮&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;因為很重要所以說三次（咦）&lt;/p&gt;

&lt;p&gt;大家務必三思以後再考慮這樣設計 schema 呢。&lt;/p&gt;

&lt;h2 id=&quot;problem-1-當我想要在-users-裡-where-order_id--11卻發現行不通&quot;&gt;Problem 1: 當我想要在 &lt;code class=&quot;highlighter-rouge&quot;&gt;users&lt;/code&gt; 裡 &lt;code class=&quot;highlighter-rouge&quot;&gt;WHERE order_id = 11&lt;/code&gt;，卻發現行不通。&lt;/h2&gt;

&lt;p&gt;如果我&lt;del&gt;沒有採用這大膽的想法&lt;/del&gt;乖乖地把 user 跟 order 用另一張表 &lt;code class=&quot;highlighter-rouge&quot;&gt;user_orders&lt;/code&gt; 來整理他們之間的多對多關係，就可以像這樣查找 id 為 11 的 order 對應到哪些 user：&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_orders&lt;/span&gt;
                          &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_orders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;但如果今天是上面那個存 comma-seperated list 的做法呢？&lt;/p&gt;

&lt;p&gt;這個時候只好改寫醜一點的 SQL query 來查找你要的 users，比方說想辦法用 REGEXP 去 match 它：&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;orders&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;REGEXP&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'[[:&amp;lt;:]]11[[:&amp;gt;:]]'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;一方面要提心吊膽自己的 REGEXP 沒寫法，會 match 到不該 match 的，另一方面還要擔心資料有不符合規範的東西，例如 &lt;code class=&quot;highlighter-rouge&quot;&gt;1, 2, 4, 11aaaa, 12&lt;/code&gt; 等等。自己 match 資料時出錯的風險也大大提高。&lt;/p&gt;

&lt;p&gt;除此之外，查找 order_id 的部分也無法加 index 來提升效能。&lt;/p&gt;

&lt;h2 id=&quot;problem-2-很難反過來找使用者的訂單資料&quot;&gt;Problem 2: 很難反過來找使用者的訂單資料&lt;/h2&gt;

&lt;p&gt;接著，如果我今天想要找&lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt; 為 1 的 user 的訂單資料，如果是乖乖新增第三張表的時候，可以簡單地 join table 解決。如果是現在這個 comma-seperated list 的作法，就只好再來寫醜醜的 SQL：&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;orders&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;orders&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;REGEXP&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'[[:&amp;lt;:]]'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;orders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'[[:&amp;gt;:]]'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;是否開始感覺到為了一時輕率的選擇，造成的後果要用一世來彌補（欸）&lt;/p&gt;

&lt;p&gt;然而問題還沒完，讓我們望向第三個問題。&lt;/p&gt;

&lt;h2 id=&quot;problem-3-不能用sumavg-等等-function-來做-aggregate-queries&quot;&gt;Problem 3: 不能用&lt;code class=&quot;highlighter-rouge&quot;&gt;SUM()&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;AVG()&lt;/code&gt; 等等 function 來做 aggregate queries&lt;/h2&gt;

&lt;p&gt;如果今天你想要統計每個使用者有多少訂單，如果是好好地使用第三張表的做法，就可以簡單地使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;SUM()&lt;/code&gt; 來找出訂單數量：&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_orders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_orders&lt;/span&gt;
                                            &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_orders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;但是用了 comma-seperated list 以後，這些資料不是分開一個 row 一個 row，而是全部擠在某個 user 的一個欄位裡。這個時候要計算訂單數量只好用一些奇妙的方法來解決。&lt;/p&gt;

&lt;p&gt;比方說，如果保證每個使用者一定有對應的帳單的話，就可以透過「逗點的數量」來計算有幾筆訂單。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;12&lt;/code&gt;: 一筆訂單&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;12, 27&lt;/code&gt;: 兩筆訂單&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;12, 27, 33&lt;/code&gt;: 三筆訂單&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;12, 27, 33, 65&lt;/code&gt;: 四筆訂單&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;也就是說，逗點數量 + 1 會是訂單數量。於是就可以透過 (總字數) - (去掉 &lt;code class=&quot;highlighter-rouge&quot;&gt;,&lt;/code&gt; 的字數) 來計算有幾個逗號。&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;orders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;REPLACE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;orders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;','&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;problem-4-順序問題&quot;&gt;Problem 4: 順序問題&lt;/h2&gt;

&lt;p&gt;想到這個 comma-seperated list 的做法的朋友們，可能會想說這個做法最簡單的地方在於，可以簡單地 append 新的 order_id 在欄位的最後面。比方說，id 為 5 的 user 原本的 orders 是 &lt;code class=&quot;highlighter-rouge&quot;&gt;11, 14, 18&lt;/code&gt;，如果要建立他跟 id 為 20 帳單的關係，只要在 &lt;code class=&quot;highlighter-rouge&quot;&gt;11, 14, 18&lt;/code&gt; 後面加上逗號與 20 就好，變成 &lt;code class=&quot;highlighter-rouge&quot;&gt;11, 14, 18, 20&lt;/code&gt; 這樣。&lt;/p&gt;

&lt;p&gt;但是如果今天正好要加進來的 id 是 &lt;code class=&quot;highlighter-rouge&quot;&gt;5&lt;/code&gt;，就會變成 &lt;code class=&quot;highlighter-rouge&quot;&gt;11, 14, 18, 5&lt;/code&gt;，經過日日夜夜的累積，你的 orders 變得順序雜亂。哪天需要照順序的 id 的時候，只好一個 row 一個 row 的資料抓出來排序QQ&lt;/p&gt;

&lt;p&gt;這個時候你或許會想說：「哦哦，那我再把它塞進去資料庫之前，先把新加的 &lt;code class=&quot;highlighter-rouge&quot;&gt;5&lt;/code&gt; 放到正確的位置！這樣就沒問題了吧？」&lt;/p&gt;

&lt;p&gt;的確是如此，這個時候必須要跑兩個 query，一個把舊資料撈出來，下一個把你把 &lt;code class=&quot;highlighter-rouge&quot;&gt;5&lt;/code&gt; 加好的資料塞回去。只是當初好好地新增一張表，現在就可以用一個 SQL 就新增新的 order_id，查詢時也可以用 ORDER BY 無痛解決排序問題。&lt;/p&gt;

&lt;h2 id=&quot;problem-5-刪除特定-id&quot;&gt;Problem 5: 刪除特定 id&lt;/h2&gt;

&lt;p&gt;再來下一個難題是，該如何刪掉特定的 id 呢？&lt;/p&gt;

&lt;p&gt;一樣要跑兩個 query，一個把資料撈出來，自己寫程式找出 id 在哪，去掉以後再把新字串塞回去。&lt;/p&gt;

&lt;p&gt;開始感覺到做出了錯誤的抉擇，會讓日後的維護很阿雜XD&lt;/p&gt;

&lt;h2 id=&quot;problem-6-資料驗證&quot;&gt;Problem 6: 資料驗證&lt;/h2&gt;

&lt;p&gt;用了 comma-seperated list 的做法以後，因為 order_id 的資料不是一個個 row 獨立存起來的，已經無法透過建立 constraint 來管理資料的正確性與完整性。當 SQL 不再幫你檢驗 constraint，如果程式那邊沒有檢查好，到時候連自己都不會知道欄位被亂塞了什麼東西（eg. &lt;code class=&quot;highlighter-rouge&quot;&gt;3, 12, 1, banana&lt;/code&gt;）&lt;/p&gt;

&lt;h2 id=&quot;problem-7-seperator-被當成-string-的一部分&quot;&gt;Problem 7: seperator 被當成 string 的一部分&lt;/h2&gt;

&lt;p&gt;假設今天 order_id 有可能使用者自訂的字串，今天有個壞心眼的使用者，把 &lt;code class=&quot;highlighter-rouge&quot;&gt;a,b,c&lt;/code&gt; 當成 order_id。於是這個 user 的 orders 就多了 &lt;code class=&quot;highlighter-rouge&quot;&gt;a,b,c&lt;/code&gt;。當你要解析這個使用者有哪些訂單時，&lt;code class=&quot;highlighter-rouge&quot;&gt;a,b,c&lt;/code&gt; 就很開心地被解析成 &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt;，然後使用者永遠都無法正常地找回他的資料。&lt;/p&gt;

&lt;p&gt;於是大家可能會開始想，我就用一個正常人不可能拿來用的字元當 seperator 吧！或者是在存入 order_id 時就限制不可以用 &lt;code class=&quot;highlighter-rouge&quot;&gt;,&lt;/code&gt; 這個字元。的確是可以這樣修正，但如果是功能都開發下去、被使用了才出事，中途搶救也會很麻煩。&lt;/p&gt;

&lt;h2 id=&quot;problem-8長度限制&quot;&gt;Problem 8:長度限制&lt;/h2&gt;
&lt;p&gt;畢竟是用一個欄位來存 order_id 們，就要特別注意長度限制。比方說 &lt;code class=&quot;highlighter-rouge&quot;&gt;user_id&lt;/code&gt; 是 &lt;code class=&quot;highlighter-rouge&quot;&gt;VARCHAR(255)&lt;/code&gt;，如果裡面塞長度為 9 的字串，可以塞到 25 個才會爆炸。於是你只好想辦法說服你的客戶，一個 user 就是不能有太多 order。&lt;/p&gt;

&lt;p&gt;這個時候，你心中的小惡魔可能會冒出來跟你說：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;齁齁齁，有什麼關係，用 TEXT 我可以塞到 65535 bytes 呢 ヽ(́◕◞౪◟◕‵)ﾉ
TEXT 不夠我可以用 LONGTEXT 呀 (☝ ՞ਊ ՞）☝&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;拜託….拜託不要亂來（欸&lt;/p&gt;

&lt;p&gt;以上已經提出這種方法的八個疑慮了，就不要再用邪魔歪道與大量 workaround 來處理事情了吧。&lt;/p&gt;

&lt;h2 id=&quot;如何發現這個-antipattern&quot;&gt;如何發現這個 Antipattern&lt;/h2&gt;

&lt;p&gt;當專案小夥伴問你：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;「這個 list 最多會有幾個 entries 呢？」
代表他已經在算 VARCHAR 長度要給多少了 ヽ(́◕◞౪◟◕‵)ﾉ&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;「用 SQL 要怎麼 match word boundary 呢？」
極有可能他正在思量怎麼從 list 裡挑出某個 entry (例子裡的 order_id) &amp;gt;&amp;lt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;「這些 entries 裡會出現哪些符號呢？有什麼絕對不可能出現的特定符號嗎？」
代表他已經在考慮 seperator 要用哪個符號了 (☝ ՞ਊ ՞）☝&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;使用這個-pattern-的合理情況&quot;&gt;使用這個 pattern 的合理情況&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;比方說你有個欄位要顯示 comma-seperated list，你不會需要取這個 list 裡的單一 item，這個時候你可能會考慮反正規化一下，加了欄位放這個 comma-seperated list&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;從別的 source 剛取回來的資料，正好有 comma-seperated list。在你 process 這些資料之前可能會考慮原封不動地存起來。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;解方intersection-table&quot;&gt;解方：intersection table&lt;/h2&gt;

&lt;p&gt;就跟以前學校老師講得一樣（欸
乖乖地新增一個 table 來存其他兩張 table 多對多的關係。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;user_id&lt;/th&gt;
      &lt;th&gt;order_id&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;補充regexp&quot;&gt;補充：REGEXP&lt;/h2&gt;
&lt;p&gt;參考 &lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/regexp.html#operator_regexp&quot;&gt;Regular Expressions - MYSQL&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;character_class-character_class&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[=character_class=]&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;[:character_class:]&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;在剛剛內文裡有用到的：&lt;/p&gt;

&lt;h3 id=&quot;-&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[[:&amp;lt;:]], [[:&amp;gt;:]]&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;可以用來查找有沒有包含特定字串：&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'a word a'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;REGEXP&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'[[:&amp;lt;:]]word[[:&amp;gt;:]]'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'a xword a'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;REGEXP&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'[[:&amp;lt;:]]word[[:&amp;gt;:]]'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;本文是參考 Bill Karwin 的 SQL Antipatterns 第二章 Jaywalking 彙整而成。原書說明了很多不太好的設計模式，什麼時候可以使用以及為何要避免使用等等。大家有空可以去翻閱看看哦。&lt;/p&gt;</content><author><name>文月</name></author><category term="sql" /><summary type="html">想當初小的在學校學 SQL 的時候，從來沒有仔細想過為什麼的多對多關聯都要再多用一個 table 來處理。</summary></entry><entry><title type="html">[SQL] 什麼要 primary key？primary key 一定要叫 id 嗎？</title><link href="/blog/sql-primary-key" rel="alternate" type="text/html" title="[SQL] 什麼要 primary key？primary key 一定要叫 id 嗎？" /><published>2020-04-27T14:13:00+08:00</published><updated>2020-04-27T14:13:00+08:00</updated><id>/blog/sql-primary-key</id><content type="html" xml:base="/blog/sql-primary-key">&lt;h2 id=&quot;問題一可不可以不要-primary-key-沒有-primary-key-會怎樣&quot;&gt;問題一：可不可以不要 primary key？ 沒有 primary key 會怎樣？&lt;/h2&gt;
&lt;p&gt;primary key 主要的作用為：&lt;/p&gt;

&lt;h3 id=&quot;1-避免產生一堆重複又無法識別的-row&quot;&gt;1. 避免產生一堆重複又無法識別的 row&lt;/h3&gt;

&lt;p&gt;例如底下的表格，上一筆跟下一筆長一模一樣，根本無法識別。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;name&lt;/th&gt;
      &lt;th&gt;price&lt;/th&gt;
      &lt;th&gt;quantity&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;banana&lt;/td&gt;
      &lt;td&gt;100&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;banana&lt;/td&gt;
      &lt;td&gt;100&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;2-有辦法撈到特定的-row&quot;&gt;2. 有辦法撈到特定的 row&lt;/h3&gt;

&lt;p&gt;如下，每個 row 都長一樣，根本無法撈到特定某個 row。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;name&lt;/th&gt;
      &lt;th&gt;price&lt;/th&gt;
      &lt;th&gt;quantity&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;banana&lt;/td&gt;
      &lt;td&gt;100&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;banana&lt;/td&gt;
      &lt;td&gt;100&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;但是改成這樣：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;id&lt;/th&gt;
      &lt;th&gt;name&lt;/th&gt;
      &lt;th&gt;price&lt;/th&gt;
      &lt;th&gt;quantity&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;banana&lt;/td&gt;
      &lt;td&gt;100&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;banana&lt;/td&gt;
      &lt;td&gt;100&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;就可以用 &lt;code class=&quot;highlighter-rouge&quot;&gt;WHERE id = 1&lt;/code&gt; 來撈到第一筆資料&lt;/p&gt;

&lt;h3 id=&quot;3-foreign-key-reference&quot;&gt;3. foreign key reference&lt;/h3&gt;

&lt;p&gt;比方說這張表是 &lt;code class=&quot;highlighter-rouge&quot;&gt;orders&lt;/code&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;customer&lt;/th&gt;
      &lt;th&gt;date&lt;/th&gt;
      &lt;th&gt;total&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Carol&lt;/td&gt;
      &lt;td&gt;2020-01-01&lt;/td&gt;
      &lt;td&gt;2000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Carl&lt;/td&gt;
      &lt;td&gt;2020-01-01&lt;/td&gt;
      &lt;td&gt;500&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Carol&lt;/td&gt;
      &lt;td&gt;2020-01-06&lt;/td&gt;
      &lt;td&gt;2500&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;有另一張表是 &lt;code class=&quot;highlighter-rouge&quot;&gt;order_items&lt;/code&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;name&lt;/th&gt;
      &lt;th&gt;price&lt;/th&gt;
      &lt;th&gt;quantity&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;banana&lt;/td&gt;
      &lt;td&gt;100&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;banana&lt;/td&gt;
      &lt;td&gt;100&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;如果 &lt;code class=&quot;highlighter-rouge&quot;&gt;orders&lt;/code&gt; 上沒有 primary key，無法透過在 &lt;code class=&quot;highlighter-rouge&quot;&gt;order_items&lt;/code&gt; 加上 foreign key 來 reference order。&lt;/p&gt;

&lt;p&gt;如果 &lt;code class=&quot;highlighter-rouge&quot;&gt;orders&lt;/code&gt; 改成這樣：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;id&lt;/th&gt;
      &lt;th&gt;customer&lt;/th&gt;
      &lt;th&gt;date&lt;/th&gt;
      &lt;th&gt;total&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;Carol&lt;/td&gt;
      &lt;td&gt;2020-01-01&lt;/td&gt;
      &lt;td&gt;2000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;Carl&lt;/td&gt;
      &lt;td&gt;2020-01-01&lt;/td&gt;
      &lt;td&gt;500&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;Carol&lt;/td&gt;
      &lt;td&gt;2020-01-06&lt;/td&gt;
      &lt;td&gt;2500&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;就可以簡單透過在 &lt;code class=&quot;highlighter-rouge&quot;&gt;order_items&lt;/code&gt; 上加 &lt;code class=&quot;highlighter-rouge&quot;&gt;order_id&lt;/code&gt;，加上 foreign key 來做 reference&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;name&lt;/th&gt;
      &lt;th&gt;price&lt;/th&gt;
      &lt;th&gt;quantity&lt;/th&gt;
      &lt;th&gt;order_id&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;banana&lt;/td&gt;
      &lt;td&gt;100&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;banana&lt;/td&gt;
      &lt;td&gt;100&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;沒有 primary key 的資料，就像是沒有書名的書，沒有歌名的音樂（欸）&lt;strong&gt;很容易造成整理上的困難。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;問題二如何選擇-primary-key&quot;&gt;問題二：如何選擇 primary key？&lt;/h2&gt;

&lt;p&gt;primary key 有個必帶條件：一定要是&lt;strong&gt;唯一（unique）&lt;/strong&gt;的，不可以重複。&lt;/p&gt;

&lt;p&gt;所以你通常會找個 unique 的欄位來當 primary key。然而很多大家以為 unique 的東西都沒有 unique，例如身分證字號。（身分證字號在古早年代是有可能不小心重複發的XD）&lt;/p&gt;

&lt;p&gt;或者是你看完 spec 以後以為應該要 unique，結果哪一天老闆跑來跟你說：「這個欄位的內容可以重複嗎？」的資料。（這個時候都會 OS：要不是我還不能離職，要不然真想打扁你XD）&lt;/p&gt;

&lt;p&gt;像是使用者的 email、電話等等。&lt;/p&gt;

&lt;p&gt;如果 primary key 這麼難選擇，選錯就會造成自己日後還得要連夜加班，有的時候不如就用 pseudokey 就好了。那具體來說 pseudokey 是什麼呢？&lt;/p&gt;

&lt;h3 id=&quot;pseudokey-surrogate-key&quot;&gt;Pseudokey (Surrogate key)&lt;/h3&gt;
&lt;p&gt;基本上是一些刻意塞給每個 row 的資料，key 本身對資料來說沒有任何意義。&lt;/p&gt;

&lt;p&gt;我們看回剛剛的 &lt;code class=&quot;highlighter-rouge&quot;&gt;order_items&lt;/code&gt;：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;id&lt;/th&gt;
      &lt;th&gt;name&lt;/th&gt;
      &lt;th&gt;price&lt;/th&gt;
      &lt;th&gt;quantity&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;banana&lt;/td&gt;
      &lt;td&gt;100&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;banana&lt;/td&gt;
      &lt;td&gt;100&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;上面的 &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt; 對我來說沒有什麼意義可言， &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt; 為 2 什麼的對我來說一點意義都沒有。但是有了這個 key 以後我就不用去思考，要用哪些欄位來組合成 primary key 了。&lt;/p&gt;

&lt;p&gt;各家 DB 提供 AUTO_INCREMENT、GENERATOR 等功能來讓 pseudokey 自動增加，且多個 client 同時來 DB 塞資料也不會重複&lt;/p&gt;

&lt;p&gt;的確很常見到教材裡面，每張表都有用來放一個 id 的 primary key 欄位，會 auto increment，甚至有些 web framework 就直接這樣設計。這個慣例很不錯，但這並不是絕對的。如果有本來就有可以拿來當 primary key 的欄位，直接拿來用也無妨。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;order_id&lt;/th&gt;
      &lt;th&gt;customer&lt;/th&gt;
      &lt;th&gt;date&lt;/th&gt;
      &lt;th&gt;total&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;Carol&lt;/td&gt;
      &lt;td&gt;2020-01-01&lt;/td&gt;
      &lt;td&gt;2000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;Carl&lt;/td&gt;
      &lt;td&gt;2020-01-01&lt;/td&gt;
      &lt;td&gt;500&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;Carol&lt;/td&gt;
      &lt;td&gt;2020-01-06&lt;/td&gt;
      &lt;td&gt;2500&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;很多 web framework 的設計讓或書籍裡，都會讓每張表的 primary key 叫 id，然而這不是絕對的！比方說把 &lt;code class=&quot;highlighter-rouge&quot;&gt;products&lt;/code&gt; 這張 table 的 primary key 叫 product_id，&lt;code class=&quot;highlighter-rouge&quot;&gt;users&lt;/code&gt; 的叫 user_id 也挺好的。而且這種命名法還有一種優點，可以透過 &lt;strong&gt;USING&lt;/strong&gt; 來 JOIN 資料表。&lt;/p&gt;

&lt;p&gt;當 bugs 的 primary key 叫 bug_id，product 上對應的 foreign key 也叫 bug_id。 除了一般的 &lt;code class=&quot;highlighter-rouge&quot;&gt;JOIN ... ON ...&lt;/code&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-SQL&quot;&gt;SELECT * FROM bugs
JOIN bug_products ON bugs.bug_id = bug_products.bug_id
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;還可以改寫成：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-SQL&quot;&gt;SELECT * FROM bugs
JOIN bug_products USING(bug_id)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;問題三只有-primary-key-無法避免資料重複&quot;&gt;問題三：只有 primary key 無法避免資料重複&lt;/h2&gt;

&lt;p&gt;如果 code 沒寫好，還是有可能出現很多重複資料。比方說這個是管理訂單跟負責員工的關聯表 &lt;code class=&quot;highlighter-rouge&quot;&gt;assignments&lt;/code&gt;：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;id&lt;/th&gt;
      &lt;th&gt;order_id&lt;/th&gt;
      &lt;th&gt;employee_id&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;330&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;330&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;331&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;除了去檢查為什麼你的 code 沒有好好地 validate 資料、避免重複，也可以檢討一下 DB 這邊沒有把 &lt;strong&gt;unique key&lt;/strong&gt; 加上去的部分。&lt;/p&gt;

&lt;p&gt;在新增 table 的時候，可以針對 order_id 和 employee_id 加上 unique key，避免出現組合重複的 order_id、employee_id：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-SQL&quot;&gt;CREATE TABLE assignments(
   ...,
   UNIQUE(order_id,employee_id)
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;除此之外，直接拿 order_id 和 employee_id 組合成 compound key 來當 primary key 也是很 OK 的作法。&lt;/p&gt;

&lt;h2 id=&quot;問題四maxid-vs-last_insert_id-&quot;&gt;問題四：&lt;code class=&quot;highlighter-rouge&quot;&gt;MAX(id)&lt;/code&gt; vs &lt;code class=&quot;highlighter-rouge&quot;&gt;LAST_INSERT_ID() &lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;有些人會自己找 &lt;code class=&quot;highlighter-rouge&quot;&gt;MAX(id)&lt;/code&gt; (資料庫裡最大的id) 去 generate 新 id。
這樣會有 Race Condition 的問題，當多個 client 同時操作資料庫，有可能不同 client 試圖塞一樣的 id 進來。為了避免 race condition 只好做 table lock，避免同時 insert，但這樣會導致效能瓶頸。&lt;/p&gt;

&lt;p&gt;如果是用 AUTO_INCREAMENT ，MYSQL 可以用 LAST_INSERT_ID() 來取最後被 insert 進來的資料 id：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT LAST_INSERT_ID() FROM products LIMIT 1;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;結論&quot;&gt;結論&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;primary key 是一種 constraint，不是一種 data type&lt;/li&gt;
  &lt;li&gt;primary key 可以是 varchar, integer 等等等，沒有一定要是 integer&lt;/li&gt;
  &lt;li&gt;primary key 可以是 auto_increment 的 pseudokey，也可以自己定義（反正 unique 就好）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;像 Rails 的理念是慣例優於設定（convention over configuration），這樣的理念使得大家可以降低開發成本，善用框架本身的設計帶來的便捷功能等等。一般來說就算不需要 Rails mibgration 幫你產生的 id，你也不會特別去拿掉他。&lt;/p&gt;

&lt;p&gt;但是這可能會讓新手誤以為 primary key 就是一個叫 id、值為 integer 的欄位，其實不是這樣的。&lt;/p&gt;

&lt;p&gt;最後，附上作者的提醒：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Don’t let inflexible conventions get in the way of good design&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;補充isoiec-11179&quot;&gt;補充：ISO/IEC 11179&lt;/h2&gt;
&lt;p&gt;針對 metadata 制訂的標準，和其他標準一樣不好閱讀。Joe Celko 在他的書 SQL propgramming style 裡有實際使用這個規範。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;本文是參考 Bill Karwin 的 SQL Antipatterns 第四章 ID required 彙整而成。原書說明了很多不太好的設計模式，什麼時候可以使用以及為何要避免使用等等。大家有空可以去翻閱看看哦。&lt;/p&gt;</content><author><name>文月</name></author><category term="sql" /><summary type="html">問題一：可不可以不要 primary key？ 沒有 primary key 會怎樣？ primary key 主要的作用為：</summary></entry><entry><title type="html">[工作日常] 如何用建立巢狀的 tailwindcss config？</title><link href="/blog/tailwind-nested-config" rel="alternate" type="text/html" title="[工作日常] 如何用建立巢狀的 tailwindcss config？" /><published>2019-08-22T14:13:00+08:00</published><updated>2019-08-22T14:13:00+08:00</updated><id>/blog/tailwind-nested-config</id><content type="html" xml:base="/blog/tailwind-nested-config">&lt;h2 id=&quot;內容更新&quot;&gt;內容更新&lt;/h2&gt;

&lt;p&gt;Tailwind 在 v1.2.0 的時候推出了 &lt;a href=&quot;https://github.com/tailwindcss/tailwindcss/pull/1162&quot;&gt;Allow plugins to extend the user’s config&lt;/a&gt;的功能，我在公司的技術文章中「&lt;a href=&quot;http://5xruby.tw/posts/tailwind-css-plugin/&quot;&gt;還在跟複雜的 CSS 的設定奮鬥嗎？用 Tailwind 來幫你實現真正的高效整潔！&lt;/a&gt;」有提到這個功能，與 Tailwind 的基本介紹。&lt;/p&gt;

&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;最近因為工作緣故使用到 &lt;a href=&quot;https://tailwindcss.com/&quot;&gt;Tailwind CSS&lt;/a&gt; 這款 css 框架。&lt;/p&gt;

&lt;p&gt;有別於 bootstrap 把 各種元件都定義好（按鈕、導覽列、card…），Tailwind 提供比較基礎的 utility classes，讓大家可以根據自己的需求來刻元件、切版型。個人蠻喜歡這樣的工具的，要不然在大家都用 bootstrap 的年代，到處網站都一個樣，看得實在是蠻不舒服的w&lt;/p&gt;

&lt;p&gt;Tailwind 本身就提供一些 default settings，像是 &lt;code class=&quot;highlighter-rouge&quot;&gt;margin: 0.25rem&lt;/code&gt;（&lt;code class=&quot;highlighter-rouge&quot;&gt;.m-1&lt;/code&gt;），或是 &lt;code class=&quot;highlighter-rouge&quot;&gt;color: #fff&lt;/code&gt;（&lt;code class=&quot;highlighter-rouge&quot;&gt;.text-white&lt;/code&gt;） 等等。如果需要客製化，也可以在 &lt;code class=&quot;highlighter-rouge&quot;&gt;tailwind.config.js &lt;/code&gt; 中新增顏色等等，而 Tailwind 會自動把 default config 和你的 customized config 合併在一起，搭配 purgeCSS 幫你把沒有用到的 css 設定拔掉，煞是方便呢。&lt;/p&gt;

&lt;h2 id=&quot;可不可以建立-nested-config&quot;&gt;可不可以建立 nested config？&lt;/h2&gt;

&lt;p&gt;然而工具雖方便好用，總是會遇到 basic usage 無法滿足的需求的狀況。比方說一個網站分成前台、後台，兩邊想用不一樣的 customized config。與此同時，有一些共用的設定（比方說兩邊都要有 &lt;code class=&quot;highlighter-rouge&quot;&gt;primary&lt;/code&gt; 這組 color）兩邊都要有，這個時候該怎麼辦呢？&lt;/p&gt;

&lt;h3 id=&quot;方案一佛系解決問題等待官方處理的那一天&quot;&gt;方案一：佛系解決問題，等待官方處理的那一天&lt;/h3&gt;

&lt;p&gt;如標題所示，緣份到來，問題自然解決。說不定哪一天官方的 new release 就幫你把問題處理好了。&lt;/p&gt;

&lt;p&gt;&lt;del&gt;如果對專案放置 play 問題就會解決，我也是很想這樣。&lt;/del&gt;&lt;/p&gt;

&lt;h3 id=&quot;方案二一邊一組-customized-config&quot;&gt;方案二：一邊一組 customized config&lt;/h3&gt;

&lt;p&gt;是個非常直觀簡單的解決方案，直接前台一個 &lt;code class=&quot;highlighter-rouge&quot;&gt;tailwind.config.js &lt;/code&gt;，後台一個 &lt;code class=&quot;highlighter-rouge&quot;&gt;tailwind.config.js &lt;/code&gt;，共同的部分就兩邊的 config 都放就好了。但是總覺得不夠 dry (Don’t repeat yourself)，維護的時候要小心保持兩邊的共同設定都一樣，實在不是個漂亮的作法。&lt;/p&gt;

&lt;h3 id=&quot;方案三把-tailwind-裡面的-resolveconfigobjects-拿來-merge-你的-customized-config&quot;&gt;方案三：把 tailwind 裡面的 ResolveConfigObjects() 拿來 merge 你的 customized config&lt;/h3&gt;

&lt;p&gt;如果打開 &lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules/tailwindcss&lt;/code&gt; 觀察觀察，會發現檔案 &lt;code class=&quot;highlighter-rouge&quot;&gt;resolveConfig.js&lt;/code&gt; 中，Tailwind 透過一個叫 resolveConfigObjects() 的 function 幫你把你的 customized config 跟 Tailwind 的 default config 合併起來。&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// node_modules/tailwindcss/resolveConfig.js&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;resolveConfigObjects&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./lib/util/resolveConfig'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;defaultConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./stubs/defaultConfig.stub.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;resolveConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;resolveConfigObjects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;defaultConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;那如果我們把這個 resolveConfigObjects() 抽出來用，是不是也可以達到 nested config 的效果呢？&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;resolveConfigObjects&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'tailwindcss/lib/util/resolveConfig'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;defaultConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'#{共同設定的那個 config 檔案}'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;extendedConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//這裡放你前台 or 後台的設定 }&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;resolveConfigObjects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extendedConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;defaultTheme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;經過實際測試後，發現會有難以解決的問題。&lt;/p&gt;

&lt;p&gt;在 Tailwind 的 config 中，有一些部分的設定會像這樣：&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;textColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;theme&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;theme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'colors'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;經過 resolveConfigObjects() 這個 function 以後，這樣的 function 會被處理成 Object：&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;textColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;transparent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'transparent'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'#000'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'#fff'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;gray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;orange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;yellow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;teal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;indigo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;purple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;pink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果這個時候在你的前台 config 裡加上一個新的顏色：&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;extendedConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;theme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;colors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;defaultTheme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;theme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;colors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;sakura&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'#f2a5b7'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;textColor 是不會更新的！如果在網頁當中有 &lt;code class=&quot;highlighter-rouge&quot;&gt;.text-sakura&lt;/code&gt;，會因為沒吃到設定而壞掉。&lt;/p&gt;

&lt;p&gt;看來還是沒辦法漂亮地解決問題呢。&lt;/p&gt;

&lt;h3 id=&quot;方案四先把你的-customized-config-都-deep-merge-過&quot;&gt;方案四：先把你的 customized config 都 deep merge 過&lt;/h3&gt;

&lt;p&gt;一樣分成共同的 config，還有前台、後台的 config。但是自行用 deepmerge 套件或 lodash 的 defaultsDeep() 把 customized config 合併起來。&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;deepMerge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'deepmerge'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;baseTheme&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'#{共同設定的那個 config 檔案}'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;extendedTheme&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//這裡放你前台 or 後台的設定&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;customizedTheme&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;deepMerge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;baseTheme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;extendedTheme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;customizedTheme&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;這四種方案（其實只有三種？）中，比較推薦這種呢。&lt;/p&gt;

&lt;h3 id=&quot;顏色的-shallow-merge-問題&quot;&gt;顏色的 shallow merge 問題&lt;/h3&gt;

&lt;p&gt;在 Tailwind 中，customize 你的設定基本上分兩種方式：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;蓋掉原本的設定（直接放到 theme 底下）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;以下方的 code 為例，md 和 lg 的設定被更動成 666px 和 888px，同時 default 的其他設定也不復存在。比方說原本的 &lt;code class=&quot;highlighter-rouge&quot;&gt;sm: '640px'&lt;/code&gt; 設定就沒有了。&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;theme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;screens&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;md&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'666px'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;lg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'888px'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  	&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;延展原本的設定（放到 theme.extend 底下）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;和剛剛類似的範例，只是改成放在 extend底下。此時 md 和 lg 的設定被更動成 666px 和 888px之餘，其他 default 的設定依舊保持。比方說原本的 &lt;code class=&quot;highlighter-rouge&quot;&gt;sm: '640px'&lt;/code&gt; 還會存在。&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;theme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;screens&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;md&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'666px'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;lg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'888px'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  	  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;但很奇妙地，Tailwind 的顏色設定無法好好的 extend。以底下的範例來說，我們的想像是 gray 原本的設定(100 ~ 900)都在，但奇蹟似地都會壞光光（欸&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;theme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;colors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;gray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;primary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'#9f9e9f'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;這個時候必須再加上一行 &lt;code class=&quot;highlighter-rouge&quot;&gt;...#{你的 defaultTheme 的名字}.theme.colors.gray&lt;/code&gt;，把 default 的資料代回來。&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;theme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;colors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;gray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;defaultTheme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;theme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;colors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;primary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'#9f9e9f'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;根據官方在 &lt;a href=&quot;https://github.com/tailwindcss/discuss/issues/242&quot;&gt;github issue&lt;/a&gt; 上的說法，似乎是因為設定還只是 shallow merge 而已。&lt;/p&gt;

&lt;p&gt;這個問題就佛系等待官方解決吧。&lt;/p&gt;

&lt;h4 id=&quot;variants-重複問題&quot;&gt;variants 重複問題&lt;/h4&gt;
&lt;p&gt;如果同時在上層跟下層加上一樣的 variants 會發生什麼事情呢？&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 上層：&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;variants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;borderColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hover'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 下層：&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;variants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;borderColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'responsive'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'hover'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;因為兩個 config 是我們自己用 deepmerge 弄的，所以合併完會變成：&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;borderColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'responsive'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'hover'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'hover'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;接著你就會發現所有 hover 的 borderColor 的 css 都變成兩倍（哭）&lt;/p&gt;

&lt;p&gt;目前想到的方式就是 variants 還是固定寫某一個檔案就好這樣。但願之後 Tailwind 官方會有更好的實務做法。&lt;/p&gt;

&lt;p&gt;（筆者使用 tailwindcss v1.0.1）&lt;/p&gt;</content><author><name>文月</name></author><category term="css" /><category term="javascript" /><summary type="html">內容更新</summary></entry><entry><title type="html">[5xRuby實習日記] Javascript 課程心得</title><link href="/blog/2016-spring-5xruby-rails-course" rel="alternate" type="text/html" title="[5xRuby實習日記] Javascript 課程心得" /><published>2016-06-02T01:23:32+08:00</published><updated>2016-06-02T01:23:32+08:00</updated><id>/blog/2016-spring-5xruby-rails-course</id><content type="html" xml:base="/blog/2016-spring-5xruby-rails-course">&lt;p&gt;覺得在五倍紅寶石實習的好處就是有各種免費的課程資源，跟喝不完的免費飲料(X)
不過由於個人還在就學的緣故，
因為衝到期中考跟各種學校事務，一直沒能把課程上好上滿QAQ”&lt;/p&gt;

&lt;p&gt;這次的JS課程很遺憾地只上了最後一堂課QAQ” (而且只有後半段QAQ) 
(沒有HTML只上到第一堂課這麼淒慘就是了)
我覺得這次的確有對jQuery有比較多的了解，以往都是一直複製別人的code亂改，
終於可以了解每一行code都在做什麼，然後完整地寫出一段code來。&lt;/p&gt;

&lt;p&gt;我覺得Kuro講師提供很多可以參考的例子提供觀摩跟練習，這一點真的有讓我覺得比較易學、易懂。
而且可以實際上了解要怎麼使用，有什麼時機可以使用。&lt;/p&gt;

&lt;p&gt;接著提供一下最後一堂課的筆記：&lt;/p&gt;
&lt;h3 id=&quot;善用find找子元素&quot;&gt;善用find找子元素&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$(this).find('.title').toggleClass('active');
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;用trigger觸發事件&quot;&gt;用trigger觸發事件&lt;/h3&gt;
&lt;p&gt;例如：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	$(.b).on('click',function(){
	$(.a).trigger('click');
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;這樣觸發的是a的click事件，因此如果a的click事件中有this，會的是a自己而不是b&lt;/p&gt;

&lt;h3 id=&quot;利用data存取指定&quot;&gt;利用data存取、指定&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;存取 ex.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	$('.home').data('show')
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如此一來可以存取有home這個class的物件的data-show的值&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;指定 ex.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	$('.home').data('show','home')
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;把有home這個class的物件的data-show的值改成home&lt;/p&gt;

&lt;p&gt;剩下晚一點再來補，不過我有寫在&lt;a href=&quot;https://hackmd.io/s/rk_X2cdl&quot;&gt;hackMD&lt;/a&gt;上提供參考&lt;/p&gt;</content><author><name>文月</name></author><category term="5xruby" /><summary type="html">覺得在五倍紅寶石實習的好處就是有各種免費的課程資源，跟喝不完的免費飲料(X) 不過由於個人還在就學的緣故， 因為衝到期中考跟各種學校事務，一直沒能把課程上好上滿QAQ”</summary></entry><entry><title type="html">[Rails 學習筆記]用Vagrant打造舒適美好的rails環境吧！</title><link href="/blog/build-rails-environment-with-vagrant" rel="alternate" type="text/html" title="[Rails 學習筆記]用Vagrant打造舒適美好的rails環境吧！" /><published>2016-05-26T23:40:58+08:00</published><updated>2016-05-26T23:40:58+08:00</updated><id>/blog/build-rails-environment-with-vagrant</id><content type="html" xml:base="/blog/build-rails-environment-with-vagrant">&lt;p&gt;相信這個世界上有許多人和我一樣，窮窮的買不起mac，
又沒有可以用 linux 的腦袋跟耐心，所以只好一直被windows慘虐QAQ”&lt;/p&gt;

&lt;p&gt;到目前為止在下都是用c9.io來寫rails的，但畢竟不是在本機寫，又沒錢買付費版，所以一直都要等c9.io的workspace緩緩慢慢的開啟，每個指令也都緩緩慢慢的。只是下個 &lt;code class=&quot;highlighter-rouge&quot;&gt;rake db:migrate&lt;/code&gt; 之類的CPU就會爆衝(下次開c9可以看右上角的值)，感覺這個環境根本不堪負荷啊…&lt;/p&gt;

&lt;p&gt;所以呢，想說用Vagrant來建虛擬機，這似乎是比較簡單的方法呢。對於我這個小腦殘來說應該不會耍雷得太嚴重XD&lt;/p&gt;

&lt;p&gt;其實網路上Vagrant的教學文還不少(而且還是中文的)，遇到問題還可以上stackoverflow查，個人覺得資源蠻多的。如果是docker的話我個人絕對沒有信心把它裝起來XD&lt;/p&gt;

&lt;p&gt;不過說實在的，心底還是默默的期望可以買mac啊&amp;gt;&amp;lt;”&lt;/p&gt;

&lt;p&gt;總而言之廢話不多說(已經講很多了)就來裝裝看吧！&lt;/p&gt;

&lt;p&gt;BTW，在下的電腦目前是萬惡的 windows 10，所以安裝過程可能跟大家不太一樣，細節可以參考底下的教材。然後安裝過程中的問題跟雷點我也會一併分享的w&lt;/p&gt;

&lt;h3 id=&quot;安裝步驟&quot;&gt;安裝步驟&lt;/h3&gt;

&lt;h4 id=&quot;安裝vagrantvirtual-boxmobaxterm&quot;&gt;安裝Vagrant、Virtual Box、MobaxTerm&lt;/h4&gt;

&lt;p&gt;首先來安裝等等會需要用到的東西：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.vagrantup.com/downloads.html&quot;&gt;Vagrant&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;依照自己的作業系統環境找適合的版本安裝&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.virtualbox.org/wiki/Downloads&quot;&gt;VirtualBox&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;VirtualBox platform packages&lt;/li&gt;
      &lt;li&gt;VirtualBox 5.0.20 Oracle VM VirtualBox Extension Pack&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://mobaxterm.mobatek.net/download.html&quot;&gt;MobaXterm&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;可以拿來連telnet、ssh、http、ftp…等等的，很方便&lt;/li&gt;
      &lt;li&gt;這次會拿來連ssh&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;安裝過程中只要一直按 &lt;code class=&quot;highlighter-rouge&quot;&gt;next&lt;/code&gt; 基本上就會裝好了XD
個人安裝沒有遇到什麼問題，有遇到的話可以google一下解決辦法。&lt;/p&gt;

&lt;h4 id=&quot;生出虛擬機&quot;&gt;生出虛擬機&lt;/h4&gt;
&lt;p&gt;接著到&lt;a href=&quot;https://atlas.hashicorp.com/boxes/search?utm_source=vagrantcloud.com&amp;amp;vagrantcloud=1&quot;&gt;Vagrant Cloud&lt;/a&gt;物色一下要安裝的box，個人這次用的是 &lt;code class=&quot;highlighter-rouge&quot;&gt;ubuntu/trusty64&lt;/code&gt;。
找到需要的版本以後會看到這樣一行command line，像這樣：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-{}&quot;&gt;$ vagrant init ubuntu/trusty64; vagrant up --provider virtualbox
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;這個時候只要愉快地把這行指令貼到terminal上，虛擬機就生出來了呢！這種時候就會覺得Vagrant真是強大呢！&lt;/p&gt;

&lt;p&gt;不過第一次開會跑很久很久很久，請耐心等待XD&lt;/p&gt;

&lt;h4 id=&quot;ssh連線&quot;&gt;ssh連線&lt;/h4&gt;
&lt;p&gt;接著差不多跑玩了的時候，稍微翻一下terminal上的訊息，應該會有類似這樣的訊息：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-{}&quot;&gt;default: SSH address: 127.0.0.1:2222
default: SSH username: vagrant
default: SSH auth method: private key
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;到virtualbox那邊看，多了一個虛擬機。
&lt;img src=&quot;http://i.imgur.com/0VPr8U6.png&quot; alt=&quot;new virtualbox&quot; /&gt;&lt;/p&gt;

&lt;p&gt;把MobaXterm打開以後，到session新增ssh session，在host、username、port填入：
&lt;img src=&quot;http://i.imgur.com/ZF8sTSt.png&quot; alt=&quot;new session&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在左邊側欄對 &lt;code class=&quot;highlighter-rouge&quot;&gt;127.0.0.1(vibrant)&lt;/code&gt; 點兩下，照理來說會出現類似 &lt;code class=&quot;highlighter-rouge&quot;&gt;vagrant@vagrant-ubuntu-trusty-64:~$&lt;/code&gt; 的東西，或是要你輸入password。
沒有的話，到 &lt;strong&gt;Settings &amp;gt; Configurations &amp;gt; Terminal&lt;/strong&gt; 把 &lt;code class=&quot;highlighter-rouge&quot;&gt;Use Windows PATH environment&lt;/code&gt;打勾。&lt;/p&gt;

&lt;p&gt;預設的username和password都會是vagrant。&lt;/p&gt;

&lt;h4 id=&quot;問題-vt-xamd-v-硬體加速在您的系統不可用&quot;&gt;問題: VT-x/AMD-V 硬體加速在您的系統不可用&lt;/h4&gt;
&lt;p&gt;我個人就是遇到這個狀況，虛擬機開不起來。
這個時候可以檢查一下虛擬化技術有沒有開起來，這個部分可以到 &lt;strong&gt;工作管理員 &amp;gt; CPU&lt;/strong&gt; 去看。
&lt;img src=&quot;http://i.imgur.com/75QAWrA.png&quot; alt=&quot;虛擬化技術&quot; /&gt;
英文版的應該會寫virtualization之類的。&lt;/p&gt;

&lt;p&gt;如果上面不是寫著「已啟用」的話，那就到BIOS去把virtualization technology 開起來吧！怎麼把BIOS開起來可以google一下。&lt;/p&gt;

&lt;p&gt;至於windows10的話，就一邊按著shift一邊重新啟動，出現藍藍畫面後選 &lt;strong&gt;進階選項 &amp;gt; UEFI韌體設定 &amp;gt; 重新啟動&lt;/strong&gt; 。
接著電腦重新啟動後就可以來改設定了！按F10進去改設定，在advanced應該會有一個叫virtualization technology的選項，把它改成enabled，就OK了！
再按F10電腦就會愉快的開機了，這一次虛擬機應該開得起來了。&lt;/p&gt;

&lt;h4 id=&quot;回復原來的狀態&quot;&gt;回復原來的狀態&lt;/h4&gt;
&lt;p&gt;如果過程中搞砸了(?)或是覺得虛擬機髒髒的越看越不順眼(?)，都可以還原成一開始的狀態呢。&lt;/p&gt;

&lt;p&gt;這裡就試著回復成乾淨的狀態吧。&lt;/p&gt;

&lt;p&gt;windows的話可以照著這個做：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-{}&quot;&gt;$ vagrant halt
$ vagrant destroy --force
$ del /F /Q  Vagrantfile
$ rmdir /S /Q  .vagrant

$ vagrant box remove ubuntu/trusty64
$ rmdir /S /Q %USERPROFILE%\.vagrant.d\boxes\ubuntu-VAGRANTSLASH-trusty64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;mac的話可以參考以下的寫法：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-{}&quot;&gt;$ vagrant halt ; vagrant destroy --force
$ rm -rf .vagrant Vagrantfile

$ vagrant box remove ubuntu/trusty64
$ rm -rf $HOME/.vagrant.d/boxes/ubuntu-VAGRANTSLASH-trusty64
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;建立環境&quot;&gt;建立環境&lt;/h4&gt;
&lt;p&gt;到這裡，我們已經學會怎麼把虛擬機開好了噢！而且還知道怎麼把它砍掉呢！可是網羅(?)還沒有結束，懂得把虛擬機開起來還要懂得安裝環境才行XDD
開起來的乾乾淨淨的虛擬機是沒有git、ruby…什麼都沒有的XD 所以還是要把環境架起來才能開心寫rails(淚顏)&lt;/p&gt;

&lt;p&gt;所以就來重新建一次虛擬機吧，不過這一次用人家架好的環境XDD
原本看gorails上有一連串複雜有可怕的步驟，覺得頭暈目眩。後來發現github上有人家弄好的環境，最後一比commit是1小時前(還有在更新中)，而且star數也有一千多，就毫不猶豫拿來用了www&lt;/p&gt;

&lt;p&gt;這一次的話就：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-{}&quot;&gt;$ git clone https://github.com/rails/rails-dev-box.git
$ cd rails-dev-box
$ vagrant up
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就有人家弄好好的環境可以用了，覺得開心愉快。
等到跑了好久好久以後，就有一台要git有git、要有ruby有ruby的虛擬機了~&lt;/p&gt;

&lt;h4 id=&quot;把rails架起來&quot;&gt;把rails架起來&lt;/h4&gt;
&lt;p&gt;不過rails-dev-box裡面有的只有寫rails會用到的東西，但是沒有rails！
對，沒~有~rails~~&lt;/p&gt;

&lt;p&gt;所以還是要自己裝一下XDD&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-{}&quot;&gt;sudo gem install rails --no-ri --no-rdoc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;到這裡恭喜大家，環境架得差不多了！
祝大家玩耍愉快！&lt;/p&gt;

&lt;h3 id=&quot;相關教材&quot;&gt;相關教材&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.codedata.com.tw/social-coding/vagrant-tutorial-1-developer-and-vm&quot;&gt;Vagrant Tutorial（1）雲端研發人員，你也需要虛擬機！&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.codedata.com.tw/social-coding/vagrant-tutorial-2-playing-vm-with-vagrant&quot;&gt;Vagrant Tutorial（2）跟著流浪漢把玩虛擬機&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://www.codedata.com.tw/social-coding/vagrant-tutorial-3-vm-lifecycle&quot;&gt;Vagrant Tutorial（3）細說虛擬機生滅狀態&lt;/a&gt;
覺得以上的教材講得其實很詳細，除了安裝步驟還有很多的介紹跟閒聊w&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/chgu82837/ab1255846b5335407105&quot;&gt;在 Windows 用 Vagrant 快速建立你的 Linux 環境&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gorails.com/guides/using-vagrant-for-rails-development&quot;&gt;Using Vagrant for Rails Development&lt;/a&gt;
gorails 上的教學，不過這篇就比較複雜一些了。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/rails/rails-dev-box&quot;&gt;Rails dev box&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>文月</name></author><category term="rails" /><summary type="html">相信這個世界上有許多人和我一樣，窮窮的買不起mac， 又沒有可以用 linux 的腦袋跟耐心，所以只好一直被windows慘虐QAQ”</summary></entry><entry><title type="html">[Rails學習筆記] 推薦初學者閱讀的兩篇文章</title><link href="/blog/two-articles-recommend-to-rails-beginner" rel="alternate" type="text/html" title="[Rails學習筆記] 推薦初學者閱讀的兩篇文章" /><published>2016-05-12T20:52:27+08:00</published><updated>2016-05-12T20:52:27+08:00</updated><id>/blog/two-articles-recommend-to-rails-beginner</id><content type="html" xml:base="/blog/two-articles-recommend-to-rails-beginner">&lt;p&gt;最近一直在反思學習歷程，
還有探討接下來應該要怎麼樣繼續磨練技術，
剛好看到兩篇不錯的文章：&lt;/p&gt;

&lt;h3 id=&quot;how-i-trained-to-learn-rails&quot;&gt;How I trained to learn rails&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://medium.com/how-i-learned-ruby-rails/how-i-trained-to-learn-rails-e08c94e2a51e#.x8nx8aqld&quot;&gt;How I trained to learn rails&lt;/a&gt;
文中有推薦的學習資源，還有一些學習的建議。
我個人覺得”Not Copying/Pasting Code”、”Not getting tired of Google-ing”、”Reading Documentation and Source Codes”三個建議蠻受用的。&lt;/p&gt;

&lt;h3 id=&quot;top-10-mistakes-that-rails-programmers-make&quot;&gt;Top 10 mistakes that rails programmers make&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.toptal.com/ruby-on-rails/top-10-mistakes-that-rails-programmers-make&quot;&gt;Top 10 mistakes that rails programmers make&lt;/a&gt;
這篇文章提到許多rails開發者會犯的錯誤，
比方說不要放太多logic在view或controller裡面，
用太多的gems (我覺得像我現在就很依賴gem，又不知所以然)，
忽略log file，沒有注意到N+1 Queues的問題…等等。
我覺得都還蠻重要的。&lt;/p&gt;

&lt;p&gt;除了以上10個錯誤以外，
我覺得我自己還常犯的錯有：沒有把相同的html放到一個partial裡重複利用、直接在view裡面呼叫model…之類的。&lt;/p&gt;

&lt;p&gt;以後還是要學習得夠扎實，還有多注意這些細節。
希望之後能夠更熟悉rails的運作，從義大利麵程式碼中脫身而出XD&lt;/p&gt;</content><author><name>文月</name></author><category term="rails" /><summary type="html">最近一直在反思學習歷程， 還有探討接下來應該要怎麼樣繼續磨練技術， 剛好看到兩篇不錯的文章：</summary></entry><entry><title type="html">[Rails學習筆記] 用Settingslogic把重要資訊藏起來!</title><link href="/blog/hide-routes-and-authenticate-with-settingslogic" rel="alternate" type="text/html" title="[Rails學習筆記] 用Settingslogic把重要資訊藏起來!" /><published>2016-05-12T20:33:54+08:00</published><updated>2016-05-12T20:33:54+08:00</updated><id>/blog/hide-routes-and-authenticate-with-settingslogic</id><content type="html" xml:base="/blog/hide-routes-and-authenticate-with-settingslogic">&lt;p&gt;首先來碎碎念一下XD
最近花了好多時間在寫自己的blog，
其實一直很想把它推到Github上(為了綠綠的contributions!!)，
但是又怕後台路徑跟帳號密碼會被看光光，其實煩惱了一陣子XD&lt;/p&gt;

&lt;p&gt;經過大師提點(?)之後才知道原來這是可以解決的呢XD
要解決這個問題有兩種方法，
一種是把設定值放在ENV，
另一種則是用settinglogic來解決這個問題。
這邊會提到的是後者~&lt;/p&gt;

&lt;p&gt;(正文要開始了w)&lt;/p&gt;

&lt;h3 id=&quot;安裝gem&quot;&gt;安裝gem&lt;/h3&gt;

&lt;p&gt;首先呢，先在 &lt;strong&gt;Gemfile&lt;/strong&gt; 中加入：&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt;  &lt;span class=&quot;s2&quot;&gt;&quot;settingslogic&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然後在terminal執行 &lt;code class=&quot;highlighter-rouge&quot;&gt;$ bundle&lt;/code&gt; 就安裝完成了。&lt;/p&gt;

&lt;h3 id=&quot;使用settinglogic&quot;&gt;使用Settinglogic&lt;/h3&gt;
&lt;p&gt;這個gem的詳細說明可以看github上的&lt;a href=&quot;https://github.com/binarylogic/settingslogic&quot;&gt;README&lt;/a&gt;。
那這邊就簡單介紹初步的使用~&lt;/p&gt;

&lt;p&gt;在 &lt;strong&gt;app/model&lt;/strong&gt; 中加入 &lt;strong&gt;settings.rb&lt;/strong&gt;，
裡面加入以下的內容：&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Settings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Settingslogic&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/config/application.yml&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;env&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;那code中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;application.yml&lt;/code&gt; 就是等一下要放後台路徑跟帳密的地方~&lt;/p&gt;

&lt;p&gt;接著務必記得把 &lt;strong&gt;application.yml&lt;/strong&gt; 加到 &lt;strong&gt;.gitignore&lt;/strong&gt; 中，
否則所有努力都是白費的噢~~~&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;$ echo &quot;config/application.yml&quot; &amp;gt;&amp;gt; .gitignore&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;後台路徑&quot;&gt;後台路徑&lt;/h3&gt;
&lt;p&gt;上次在文章 &lt;a href=&quot;http://fumitsuki-blog.herokuapp.com/articles/backend-with-namespace&quot;&gt;善用namespace建立後台&lt;/a&gt; 中有提到後台路徑的作法，
這邊要更進階的把後台路徑藏起來~&lt;/p&gt;

&lt;p&gt;打開 &lt;strong&gt;config/route.rb&lt;/strong&gt; ，原本的後台路徑應該是：&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:admin&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;這邊要把它改成：&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:admin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;path: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;admin_path_prefix&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;這裡的 ‘admin_path_prefix&lt;code class=&quot;highlighter-rouge&quot;&gt; 到時候會放在 **application.yml** 存後台路徑。
(可以自己取，要叫 &lt;/code&gt;backend_path` 什麼的隨意~)
所以接著就在 &lt;strong&gt;config/&lt;/strong&gt; 中加入 &lt;strong&gt;application.yml&lt;/strong&gt;，裡面加上：&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;defaults&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;&amp;amp;defaults&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;development&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;*defaults&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;admin_path_prefix&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;your_admin_path&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;*defaults&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;admin_path_prefix&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;your_admin_path&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;production&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;*defaults&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;admin_path_prefix&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;your_admin_path&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;這裡的 ` your_admin_path&lt;code class=&quot;highlighter-rouge&quot;&gt; 就是後台路徑~ 
可以根據不同的環境自訂後台~
如果 &lt;/code&gt;$ rails s` 的時候會出錯，建議檢查一下有沒有多打少打什麼，還有縮排正不正確。&lt;/p&gt;

&lt;h3 id=&quot;http-basic-authetication&quot;&gt;http basic authetication&lt;/h3&gt;
&lt;p&gt;常常用 http basic authetication 都是在 controller 中加入：&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;http_basic_authenticate_with&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;name: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;my_name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;password: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;my_secret&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果這行跟著 controller 一起被推上github repo的話，肯定會被黑黑攻陷的！(誤)
所以也要想辦法放到 application.yml 中。
所以先把現在這行改成：&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;http_basic_authenticate_with&lt;/span&gt;  &lt;span class=&quot;no&quot;&gt;Settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;http_basic_auth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_h&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;這裡的 &lt;code class=&quot;highlighter-rouge&quot;&gt;http_basic_auth&lt;/code&gt; 就是會在 &lt;strong&gt;application.yml&lt;/strong&gt; 中加入的帳密，
&lt;code class=&quot;highlighter-rouge&quot;&gt;.to_h&lt;/code&gt; 會把 &lt;code class=&quot;highlighter-rouge&quot;&gt;http_basic_auth&lt;/code&gt; 轉成雜湊。&lt;/p&gt;

&lt;p&gt;接著呢，在 &lt;strong&gt;application.yml&lt;/strong&gt;加入&lt;code class=&quot;highlighter-rouge&quot;&gt;http_basic_auth&lt;/code&gt; ：&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;defaults&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;&amp;amp;defaults&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;development&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;*defaults&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;admin_path_prefix&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;your_admin_path&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;http_basic_auth&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;your_name&lt;/span&gt; 
    &lt;span class=&quot;s&quot;&gt;:password&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Your_password&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;*defaults&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;production&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;*defaults&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;admin_path_prefix&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;your_admin_path&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;http_basic_auth&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;your_name&lt;/span&gt; 
    &lt;span class=&quot;s&quot;&gt;:password&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Your_password&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;這樣就大功告成了！接著只要開啟server確定有好好運作就OK了~
照理來說後台路徑會變成 &lt;code class=&quot;highlighter-rouge&quot;&gt;your_admin_path/your_controller_name&lt;/code&gt; 噢~&lt;/p&gt;

&lt;p&gt;到這裡告一段落~ 趕快來試試看吧！&lt;/p&gt;</content><author><name>文月</name></author><category term="rails" /><summary type="html">首先來碎碎念一下XD 最近花了好多時間在寫自己的blog， 其實一直很想把它推到Github上(為了綠綠的contributions!!)， 但是又怕後台路徑跟帳號密碼會被看光光，其實煩惱了一陣子XD</summary></entry><entry><title type="html">[5xRuby實習日記] HTML &amp;amp; CSS課程心得</title><link href="/blog/2016-spring-5xruby-html&css-course" rel="alternate" type="text/html" title="[5xRuby實習日記] HTML &amp; CSS課程心得" /><published>2016-04-29T00:56:13+08:00</published><updated>2016-04-29T00:56:13+08:00</updated><id>/blog/2016-spring-5xruby-html&amp;css-course</id><content type="html" xml:base="/blog/2016-spring-5xruby-html&amp;css-course">&lt;p&gt;首先呢，我要先懺悔一下XD
由於課務的關係有點忙忙的，所以沒有全程參與HTML的課程，
而且老實說我只有去上第一堂課QwQ”
要不然我覺得Amos講師講得還不錯的說…&lt;/p&gt;

&lt;p&gt;所幸這是第二次上Amos的課，所以我還生得出心得來(X)&lt;/p&gt;

&lt;p&gt;雖然以前就碰過一點點HTML跟CSS，
但是一直倚賴bootstrap套版，
其實沒有好好的練習過自己切版、寫RWD，
而且也沒有顧及SEO的部分，
我覺得這點就還重要的。&lt;/p&gt;

&lt;p&gt;覺得雖然可以看過網路上的文件，就大概知道怎麼樣使用標籤、怎麼刻CSS，
但其中還是有很多枚枚角角，真的還是要有有經驗的人來提點，
還有怎麼刻會有那些缺點之類的，我覺得這點也是收穫最多的部分吧。&lt;/p&gt;

&lt;p&gt;有興趣的話可以追蹤一下Amos講師的網站&lt;a href=&quot;csscoke.com&quot;&gt;CSS可樂&lt;/a&gt;，
還有容我工商服務一下w 可以參考一下&lt;a href=&quot;https://5xruby.tw/talks?category=front-end&quot;&gt;五倍紅寶石的前端課程&lt;/a&gt;噢XD&lt;/p&gt;</content><author><name>文月</name></author><category term="5xruby" /><summary type="html">首先呢，我要先懺悔一下XD 由於課務的關係有點忙忙的，所以沒有全程參與HTML的課程， 而且老實說我只有去上第一堂課QwQ” 要不然我覺得Amos講師講得還不錯的說…</summary></entry><entry><title type="html">[Rails 學習筆記]善用namespace建立後台</title><link href="/blog/backend-with-namespace" rel="alternate" type="text/html" title="[Rails 學習筆記]善用namespace建立後台" /><published>2016-04-28T00:07:19+08:00</published><updated>2016-04-28T00:07:19+08:00</updated><id>/blog/backend-with-namespace</id><content type="html" xml:base="/blog/backend-with-namespace">&lt;p&gt;在寫blog的時候一直很苦惱要怎麼寫後台，
是要另外有一個叫backend的controller嗎？還是怎麼樣呢？&lt;/p&gt;

&lt;p&gt;後來才知道原來有namespace這東西，覺得人間愉快(X)&lt;/p&gt;

&lt;p&gt;所以廢話少說就開始吧！&lt;/p&gt;

&lt;h3 id=&quot;route的部分&quot;&gt;route的部分&lt;/h3&gt;
&lt;p&gt;首先到 &lt;strong&gt;route.rb&lt;/strong&gt; 加入：&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:admin&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;resources&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:articles&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;這樣index的路徑就換變成 &lt;strong&gt;admin/articles&lt;/strong&gt; 了， 
可以用&lt;code class=&quot;highlighter-rouge&quot;&gt;$ rake routes&lt;/code&gt;來看一下路徑長什麼樣子。&lt;/p&gt;

&lt;p&gt;然後這邊要特別注意（大師提點的，不是我自己說的w），
盡量不要用admin、backend這種大家都想得到的名稱。
否則後台很容易被恐怖的大黑黑所攻陷。(黑黑最喜歡戳戳了(́◉◞౪◟◉‵))&lt;/p&gt;

&lt;p&gt;當然，article的部分就是controller的名字，要叫posts…什麼的都可以。&lt;/p&gt;

&lt;h3 id=&quot;controller的部分&quot;&gt;Controller的部分&lt;/h3&gt;
&lt;p&gt;接下來是contorller的部分，這邊只要有基本的CRUD加上認證就OK了。
（其他功能就自己盡情加吧，那就跟本文無關了w）
可以善用command line來建立controller，像是：&lt;code class=&quot;highlighter-rouge&quot;&gt;$ rails g controller admin/articles&lt;/code&gt;
這個時候可以發現多出了 &lt;strong&gt;app/controllers/admin/articles_controller.rb&lt;/strong&gt; 這個檔案，
到這裡後台的路徑就差不多了。&lt;/p&gt;

&lt;h3 id=&quot;使用者認證&quot;&gt;使用者認證&lt;/h3&gt;
&lt;p&gt;這個部分看是多使用者還是單一使用者，
如果是單一使用者的話可以用簡單的 &lt;strong&gt;http basic authenticate&lt;/strong&gt; 來處理。&lt;/p&gt;

&lt;p&gt;在剛剛的 &lt;strong&gt;admin/articles_controller.rb&lt;/strong&gt; 中加入：&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;http_basic_authenticate_with&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;name: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;your_name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;password: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;your_password&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;這邊的&lt;code class=&quot;highlighter-rouge&quot;&gt;your_name&lt;/code&gt;跟&lt;code class=&quot;highlighter-rouge&quot;&gt;your_password&lt;/code&gt;就自由填入自訂的帳號密碼吧！
多使用者的話，可以用 &lt;strong&gt;devise&lt;/strong&gt; 這個方便好用的套件。&lt;/p&gt;

&lt;p&gt;首先，在 &lt;strong&gt;Gemfile&lt;/strong&gt; 中加入：&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'devise'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然後在命令列輸入&lt;code class=&quot;highlighter-rouge&quot;&gt;$ bundle&lt;/code&gt;就可以安裝套件了。
接著呢，再命令列輸入&lt;code class=&quot;highlighter-rouge&quot;&gt;$ rails g devise:install&lt;/code&gt;來產生devise設定檔
再輸入&lt;code class=&quot;highlighter-rouge&quot;&gt;$ rails g devise user&lt;/code&gt;產生user model，然後便忘了&lt;code class=&quot;highlighter-rouge&quot;&gt;rake db:migrate&lt;/code&gt;來migrate它。Devise也提供view的樣板可以使用，在命令列輸入&lt;code class=&quot;highlighter-rouge&quot;&gt;rails generate devise:views&lt;/code&gt;就可以自動產生了。&lt;/p&gt;

&lt;p&gt;除此之外，
其實也有後台的套件可以用，像說&lt;a href=&quot;https://github.com/sferik/rails_admin&quot;&gt;rails_admin&lt;/a&gt;之類的，可以參考看看呢。&lt;/p&gt;</content><author><name>文月</name></author><category term="rails" /><summary type="html">在寫blog的時候一直很苦惱要怎麼寫後台， 是要另外有一個叫backend的controller嗎？還是怎麼樣呢？</summary></entry><entry><title type="html">[5xRuby實習日記] Javascript 課程心得</title><link href="/blog/2016-spring-5xruby-javascript-course" rel="alternate" type="text/html" title="[5xRuby實習日記] Javascript 課程心得" /><published>2016-04-28T00:02:15+08:00</published><updated>2016-04-28T00:02:15+08:00</updated><id>/blog/2016-spring-5xruby-javascript-course</id><content type="html" xml:base="/blog/2016-spring-5xruby-javascript-course">&lt;p&gt;覺得在五倍紅寶石實習的好處就是有各種免費的課程資源，跟喝不完的免費飲料(X)
不過由於個人還在就學的緣故，
因為衝到期中考跟各種學校事務，一直沒能把課程上好上滿QAQ”&lt;/p&gt;

&lt;p&gt;這次的JS課程很遺憾地只上了最後一堂課QAQ” (而且只有後半段QAQ) 
(沒有HTML只上到第一堂課這麼淒慘就是了)
我覺得這次的確有對jQuery有比較多的了解，以往都是一直複製別人的code亂改，
終於可以了解每一行code都在做什麼，然後完整地寫出一段code來。&lt;/p&gt;

&lt;p&gt;我覺得Kuro講師提供很多可以參考的例子提供觀摩跟練習，這一點真的有讓我覺得比較易學、易懂。
而且可以實際上了解要怎麼使用，有什麼時機可以使用。&lt;/p&gt;

&lt;p&gt;接著提供一下最後一堂課的筆記：&lt;/p&gt;
&lt;h3 id=&quot;善用find找子元素&quot;&gt;善用find找子元素&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$(this).find('.title').toggleClass('active');
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;用trigger觸發事件&quot;&gt;用trigger觸發事件&lt;/h3&gt;
&lt;p&gt;例如：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	$(.b).on('click',function(){
	$(.a).trigger('click');
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;這樣觸發的是a的click事件，因此如果a的click事件中有this，會的是a自己而不是b&lt;/p&gt;

&lt;h3 id=&quot;利用data存取指定&quot;&gt;利用data存取、指定&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;存取 ex.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	$('.home').data('show')
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如此一來可以存取有home這個class的物件的data-show的值&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;指定 ex.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	$('.home').data('show','home')
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;把有home這個class的物件的data-show的值改成home&lt;/p&gt;

&lt;p&gt;剩下晚一點再來補，不過我有寫在&lt;a href=&quot;https://hackmd.io/s/rk_X2cdl&quot;&gt;hackMD&lt;/a&gt;上提供參考&lt;/p&gt;</content><author><name>文月</name></author><category term="5xruby" /><summary type="html">覺得在五倍紅寶石實習的好處就是有各種免費的課程資源，跟喝不完的免費飲料(X) 不過由於個人還在就學的緣故， 因為衝到期中考跟各種學校事務，一直沒能把課程上好上滿QAQ”</summary></entry></feed>